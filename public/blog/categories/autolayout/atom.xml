<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: autolayout | 姚翔的部落格]]></title>
  <link href="http://sherlockyao.com/blog/categories/autolayout/atom.xml" rel="self"/>
  <link href="http://sherlockyao.com/"/>
  <updated>2016-11-03T17:20:56+08:00</updated>
  <id>http://sherlockyao.com/</id>
  <author>
    <name><![CDATA[Sherlock Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS UITableView 使用小贴士]]></title>
    <link href="http://sherlockyao.com/blog/2015/06/28/uitableview-tips/"/>
    <updated>2015-06-28T15:27:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/06/28/uitableview-tips</id>
    <content type="html"><![CDATA[<p>UITableView 可以说是搭建应用时必不可少的控件之一，同时也是最常见、遇到最多自定义需求的控件之一，所以今天这里总结了几个平时使用时的小技巧，给自己备忘的同时也分享给大家。</p>

<h3>> 去除多余的Separator</h3>

<p>有时，我们会使用到table view自带的行分隔线样式，但是会遇到一个问题，就是当列表内没有cell时，或者cell数量不足以填充列表可见高度时，列表仍然会显示额外的分隔线。一个快速的解决方案是给table view设置一个空白的footer view：</p>

<pre><code class="objc">
tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
</code></pre>

<h3>> 设置初始显示位置</h3>

<p>在一些用例场景中，我们会要求当用户进入到一个列表页面时，他需要首先看到列表最底部的cell（或者其他一些位置不在top的cell）。通常我们第一反应便是在 UIViewController 的 viewWillAppear: 方法中用代码把table view滚动到需要的位置，但实际上这个方案并不奏效（造成这个的原因是，在viewWillAppear的这个阶段，view还没有真正地去layout，所以table view此时还不知道它真正的content size，也就无法滚动到正确的位置）；紧接着，我们会尝试把代码移动到 viewDidAppear: 方法中，结果确实起作用了，但是用户会在视觉上看到一个滚动的过程，所以并不理想。这里提供一种比较trick的解决方案来处理这个问题：</p>

<pre><code class="objc">
- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];

    if (!self.hasFinishedLayoutView) {
        self.hasFinishedLayoutView = YES; // 这里用一个flag来避免多次执行

        [self.tableView layoutIfNeeded];

        NSIndexPath* indexPath = ...; // 定义要滚动到的位置
        [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:NO];
    }
}
</code></pre>

<p>我们把滚动代码移到 viewDidLayoutSubviews 这个生命周期方法中去，这样就可以成功了。注意一点：我这里手动调用了一下table view的layoutIfNeeded方法，因为在我的实践中，我的view都是用autolayout来构建的，如果这里不手动layout一下，table view的内容大小在这个阶段还是不正确的。</p>

<h3>> 随着Cell一起滚动的Section Header</h3>

<p>UITableView的section header view有一个自带的炫酷功能，就是浮动(floating)，当列表滚动的时候，它会自动附着在顶部直到其他Section的内容把它顶掉。但是我们有时候不想要这样的效果，我们希望它能跟着cell一起滚动，那应该怎么处理呢？很不幸的是，官方公开的API中并不提供这种选项，那怎么办呢？我自己选择的一种解决方案就是，用cell的方式来实现header的功能：1）去掉所有section header的定义； 2）自己维护好DataSource的index path关系，每个section的第一行是header cell，接下去的才是真正展示数据的cell。</p>

<h3>> 自适应高度的Cell（Self-Sizing Cell）</h3>

<p>关于这个话题，网上已经有很多教程了，我这里就不再赘述，而是列出一些关键点以供备忘用。因为要能灵活运用这个功能，了解其原理是很重要的，tips只是为了不违背“好记性不如烂笔头”这个亘古不变的告诫，所以如果大家对其仍一知半解的话，建议看WWDC官方视频深入了解一下。<a href="https://developer.apple.com/videos/wwdc/2014/#226">视频链接请戳这里</a></p>

<p>下面是一些要点：</p>

<ul>
<li><p>把UITableView的<strong>rowHeight</strong>属性设置成<strong>UITableViewAutomaticDimension</strong></p></li>
<li><p>把UITableView的<strong>estimatedRowHeight</strong>属性设置成适合实际情况的估算值</p></li>
<li><p>如果使用Autolayout约束的方式来定义cell的高度，一定要加足够多的约束，从而能让cell通过这些约束计算出对应的高度。比如：一个只显示一个UILabel的cell，我们要给label同时加上距离ContentView top和bottom两个约束，这样cell才能通过label内容的高度，再加上上下距离来确定cell需要的实际高度是多少。</p></li>
<li><p>一般涉及到动态高度的情况都会有UILabel元素的加入，所以如果想要通过label的内容来扩大cell高度的话，记得要把numberOfLines属性设置成0</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Content Hugging vs. Compression Resistance]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/18/hugging-vs-resistance/"/>
    <updated>2015-04-18T16:32:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/18/hugging-vs-resistance</id>
    <content type="html"><![CDATA[<p>iOS Auto Layout中的Content Hugging（内容吸附）和Compression Resistance（压缩阻力）曾一度让我非常困惑，看过一些说明的文章后当时觉得豁然开朗，但一段时间后便又忘记了，所以我决定再一次全面地整理一下并用博客的形式分享出去，这样可以帮助我自己加强记忆。
(注：“内容吸附”和“压缩阻力”是特别借用了objccn里文章的翻译内容，非常感谢作者，<a href="http://objccn.io/issue-3-5/">原文链接</a>)</p>

<p>首先，我们先简单说明一下约束（Constraint）中的Priority概念：Auto Layout中，每个约束都有一个1-1000的priority值，其中1000是其默认的值，也是 NSLayoutPriorityRequired 的，意思就是这个约束必须完全得到满足；所有小于1000的值则都是非强制的。系统在实现自动布局时，首先会满足所有priority是1000的约束，然后按照从大到小的值依次去尽量满足非强制性的约束，这种情况下，系统会尽量使结果的值接近于约束要求的值。</p>

<p>现在让我们来具体说明一下Hugging和Resistance到底是什么，用通俗易懂的话来描述的话是这样的：</p>

<ul>
<li>Content Hugging：我的内容区域不想被扩展（变高或变宽）</li>
<li>Compression Resistance：我的内容区域不想被压缩 （变矮或变短）</li>
</ul>


<p>注意到了吧，描述里面都有“内容区域”这个概念，这个指的就是Intrinsic Content Size，所以压缩阻力和内容吸附只对定义了Intrinsic Content Size的UI元素有效，否则的话就不存在所谓的“我的内容区域”的概念了。</p>

<p>下面就以一个具体的例子来说明一下这两个属性的作用。假设我们有一个Button放置在界面中，同时设置了两个priority是500的约束：左右各距离父元素 30 points，即如下图所示：</p>

<blockquote><p>|-30-[     Button     ]-30-|</p></blockquote>

<p>此时，如果我们给它设置一个水平priority是750的 Content Hugging 属性，那我们将看到它的实际布局会变成这样：</p>

<blockquote><p>|&mdash;-60&mdash;[Button]&mdash;60&mdash;-|</p></blockquote>

<p>但是如果这个 Content Hugging 属性的priority是小于500的，那我们看到的效果和初始状态是一样的：</p>

<blockquote><p>|-30-[     Button     ]-30-|</p></blockquote>

<p>然后，因为某些原因，它的父元素的宽度变窄了，在没有任何 Compression Resistance 属性时，它就变成了这样（按钮的文字显示不全了）：</p>

<blockquote><p>|-30-[But..]-30-|</p></blockquote>

<p>此时，如果我们给它设置一个水平priority是750的 Compression Resistance 属性，结果就会是：</p>

<blockquote><p>|-25-[Button]-25-|</p></blockquote>

<p>同样的，如果这个属性的优先级小于500，那结果就没有变化。另外，如果我们把初始的两个左右边距的约束优先级调整到1000，那不管我们怎么设置压缩阻力或内容吸附的属性，都不会改变布局效果，这个按钮会始终保持左右边距30的布局。</p>
]]></content>
  </entry>
  
</feed>
