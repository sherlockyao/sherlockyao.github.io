<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[姚翔的部落格]]></title>
  <link href="http://sherlockyao.com/atom.xml" rel="self"/>
  <link href="http://sherlockyao.com/"/>
  <updated>2016-11-04T16:43:32+08:00</updated>
  <id>http://sherlockyao.com/</id>
  <author>
    <name><![CDATA[Sherlock Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[更轻松地页面跳转，Wireframe框架（下）]]></title>
    <link href="http://sherlockyao.com/blog/2016/11/04/wireframe-framework-2/"/>
    <updated>2016-11-04T16:04:37+08:00</updated>
    <id>http://sherlockyao.com/blog/2016/11/04/wireframe-framework-2</id>
    <content type="html"><![CDATA[<p>上篇我解释了Wireframe框架的大体思路和跳转逻辑，这次我具体说明一下里面的builder, navigator和transition的概念。</p>

<h3>Builder</h3>

<p>Builder顾名思义就是用来实例化目标View Controller的工厂。在Wireframe中实例化View Controller有两种方法：1）通过storyboard初始化 2）通过代码。下图是配置文件中相应的配置内容：</p>

<p><img src="http://sherlockyao.com/images/20161104/decodes.png" title="" alt="File Inspector" /></p>

<p>可见，如果View Controller被画在了storyboard中，那么只要提供对应的storyboard文件名称，以及对应的view controller id，那么wireframe会自动通过storyboard来实例化。如果要使用代码实例化(包括从xib文件加载页面)，那么就需要通过配置builder来实现。首先需要在配置文件中配置对应的builder code，然后通过调用wireframe实例的register方法去注册对应的builder即可，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">register</span><span class="p">(</span><span class="nl">builderName</span><span class="p">:</span> <span class="s">&quot;product&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIViewController</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">productViewController</span> <span class="o">=</span> <span class="n">ProductViewController</span><span class="p">()</span>
</span><span class='line'>    <span class="n">productViewController</span><span class="p">.</span><span class="n">productName</span> <span class="o">=</span> <span class="n">params</span><span class="o">?</span><span class="p">[</span><span class="n">WireframeParam</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">rawValue</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">productViewController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">register</span><span class="p">(</span><span class="nl">builderName</span><span class="p">:</span> <span class="s">&quot;seller&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIViewController</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">SellerViewController</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="s">&quot;SellerViewController&quot;</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的实例化方式，是根据你具体的业务逻辑需求来的，方法所传递的params参数，是页面跳转时所传的额外参数(optional)，你可以根据具体需要来定制目标view controller的初始化过程。目前框架只提供了一个简单的UIAlertController的默认builder。</p>

<h3>Navigator</h3>

<p>Navigator则是负责具体跳转的接口。它和Builder的使用方法类似，在配置文件中配置对应的name/code，然后通过register方法注册对应的navigator实现到wireframe中去。框架默认提供了7个常用的跳转方式，比如：present(Animated or Not Animated)，push(Animated or Not Animated)，如果app的跳转方式比较简单，那么默认的navigators就已经足够满足需求了。下面的代码演示了如果注册一个navigator，它的作用就是给目标view controller包上一个navigation controller再做跳转：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">register</span><span class="p">(</span><span class="nl">navigatorName</span><span class="p">:</span> <span class="s">&quot;navigation-wrap&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">sourceViewController</span><span class="p">,</span> <span class="n">destinationViewController</span><span class="p">,</span> <span class="n">completion</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">navigationController</span> <span class="o">=</span> <span class="bp">UINavigationController</span><span class="p">(</span><span class="nl">rootViewController</span><span class="p">:</span> <span class="n">destinationViewController</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sourceViewController</span><span class="p">.</span><span class="n">present</span><span class="p">(</span><span class="n">navigationController</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">false</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="n">completion</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transition</h3>

<p>有些时候，我们需要给跳转过程加特定的动画效果，这就需要我们用到类似UIViewControllerAnimatedTransitioning这样的技术，wireframe也提供了配置的方式，每个Wireframe实例有一个optional的transition接口变量，你可以设置成自己实现的transition接口，每当wireframe完成目标view controller的初始化后，就会调用对应的接口方法来配置需要的transition，你可以通过判断soure和destination的类型来选择对应的动画效果。</p>

<p>目前transition这个配置的方式还不是很完美，会有很多类型判断的代码在里面，如果大家有好的建议欢迎给我留言：）</p>

<p>最后要说的是，对于大型的项目而言，一个项目中可以有多个wireframe存在，每个wireframe负责某个模块内部的调度，然后再由一个总的wireframe来负责模块间的调度，这样可以使结构更清晰，可维护性更强。这个是框架的<a href="https://github.com/sherlockyao/SYWireframe">Github链接</a>，欢迎大家提供宝贵意见和建议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更轻松地页面跳转，Wireframe框架（上）]]></title>
    <link href="http://sherlockyao.com/blog/2016/11/04/wireframe-framework/"/>
    <updated>2016-11-04T14:05:47+08:00</updated>
    <id>http://sherlockyao.com/blog/2016/11/04/wireframe-framework</id>
    <content type="html"><![CDATA[<p>笔者也已经写过不少的app了，在每个app的开发过程中，一个亘古不变的需求就是页面之间的跳转。虽然这是个非常不起眼的功能，有时候你简单的一行 pushViewController:XXX 代码就搞定了，但它也有着大学问。</p>

<p>试想这样一个场景：项目初期，需求很简单，A界面中点击某个按钮需要跳转到B，所以在按钮点击事件中，我们用代码初始化B的实例，然后调用对应的跳转方法实现了该功能；然后新需求来了，有了一个新的C界面，也需要跳转到B，所以我们就拷贝了相同的代码到C里面，实现需求；迭代还在继续，B界面的内容需要根据入口的不同有一些细节上的不同，所以我们给B添加了初始化参数，然后A和C通过传递不同的参数值来定制B；UI的改版也接踵而来，进入B界面的时候需要添加过渡动画效果，所以我们编写了对应的transition代码，在A和C的入口处添加了相同的动画配置代码；代码越来越多，leader说需要重构一下，B要重命名，传参方式也要改一下，于是我们开始重构，A和C的入口代码也进行了相应修改，但为了保证能覆盖修改到所有调用B的地方，我们还不停search，思考各种使用到的case，但还是不能保证是否都改掉了。</p>

<p>上面的场景在平常的的开发过程中是很普遍的，可见跳转逻辑因为其耦合强的关系导致代码维护成本很高。通常遇到这种情况，我们会把重复的部分抽取出来，包装成对应的模块来减小耦合，但是我们始终没有一套框架性的东西来整体解决这个问题，更多的只是具体问题具体方案解决，所以不是很便利。以前笔者在研究VIPER架构的时候，就对里面Routing的wireframe概念很感兴趣，它给解决这种跳转的问题带来了一个很好的思路，经过多次实践，笔者整理出了一套自己的解决方案，所以把它单独抽取出来作为一个小框架分享出来，希望可以帮助大家能更轻松地维护页面跳转的逻辑。<a href="https://github.com/sherlockyao/SYWireframe">项目Github链接</a></p>

<p>框架的基本思想很简单：把app里面所有页面之间的跳转关系都抽取出来，统一交由wireframe处理，页面之间不再彼此知道，从而减轻了耦合，减少需求改动时的维护成本。举例来说：传统的方式下，A界面点击一个按钮需要跳转到B，那么A需要知道B这个类的定义，要负责去初始化它，还需要知道当前所在的页面结构，从而决定用什么样的方式去展示B(比如是用push还是present)。采用了wireframe框架后，A只需要调用下面一行代码来完成跳转：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Wireframe</span><span class="p">.</span><span class="n">sharedWireframe</span><span class="p">.</span><span class="n">navigateTo</span><span class="p">(</span><span class="nl">port</span><span class="p">:</span> <span class="p">.</span><span class="n">detail</span><span class="p">,</span> <span class="nl">gate</span><span class="p">:</span> <span class="p">.</span><span class="n">product</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把跳转点换成了一个抽象的概念：Port和Gate。Port和Gate都只是简单的String值，用户可以根据自己App的内容来定义，通常来说，Port可以定义为广义功能类型，Gate定义成具体的业务功能。以上面这个代码为例，它的意思就是告诉wirefraem：我现在需要跳转了，要跳转到一个detail类型的界面，具体的内容是product，接下来就交由wireframe去完成所有的工作。那么wireframe是怎么完成这个跳转的呢，它大致的步骤如下：</p>

<ol>
<li>通过配置文件找到对于A来说，对应的detail-product功能点的view controller是哪个，比如找到了B</li>
<li>初始化B，如果有传递参数，则把对应的参数也配置到B中去</li>
<li>通过配置文件找到此次跳转需要的跳转方式</li>
<li>如果需要自定义transition方式，则配置对应效果</li>
<li>执行跳转代码</li>
</ol>


<p>上面的步骤中，提到了配置文件，它是个什么东西呢？它其实是一个.plist文件，是框架的使用者用于配置整个app中页面关系的文件，wireframe通过读取该文件就能知道所有页面之间的关系，它的内容其实非常简单，我们来看一下示例项目中所带配置文件内容：</p>

<p><img src="http://sherlockyao.com/images/20161104/wireframe.png" title="" alt="File Inspector" /></p>

<p>整个文件分两个部分：Decodes 和 Destinations</p>

<ul>
<li><p>Decodes是配置view controller的class和代号(code)之间的关系的，同时还配置了如何实例化该view controller的方式(builder)</p></li>
<li><p>Destinations则是配置页面跳转的关系的，同时还配置了跳转的方式(navigator)</p></li>
</ul>


<p>还是以最前面的那行代码为例，我们来讲解一下具体的流程：</p>

<ol>
<li>当HomeViewController调用了对应的跳转方法后，wireframe先通过decodes部分找到了它对应的code是“Home”</li>
<li>把port和gate同code拼接起来，组成跳转的key，也就是："Home-Detail-Product"</li>
<li>wireframe通过Destinations部分找到了key所对应的target code："Product"，也就是要跳转到的页面的code</li>
<li>wireframe又通过decodes找到了Product对应的初始化方式(builder)：product</li>
<li>它通过该builder初始化了对应的view controller（builder是什么将在下期介绍）</li>
<li>配置中本次跳转对应的跳转方式是(navigator)：navigation-wrap（navigator是什么将在下期介绍）</li>
<li>Wireframe最终采用对应的跳转方式完成了跳转</li>
</ol>


<p>可见，Wireframe完成了所有原来耦合部分的工作，同时通过配置文件的方式用户可以很容易地修改跳转关系和方式。而对于页面A来说，它根本不需要知道B的存在，它只需要知道我要跳转到一个什么功能点。</p>

<p>目前这个框架刚完成了第一个版本，完全用swift编写，相信还有很大改进空间。如果大家感兴趣，可以试用一下，里面也带来sample项目可帮助大家理解，希望这个小工具能够帮助到大家。<a href="https://github.com/sherlockyao/SYWireframe">项目Github链接</a></p>

<p>下期将具体说明一下builder, navigator以及transition的定义和使用方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[响应式编程入门（下）]]></title>
    <link href="http://sherlockyao.com/blog/2016/02/16/head-first-reactive-programming-2/"/>
    <updated>2016-02-16T16:00:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2016/02/16/head-first-reactive-programming-2</id>
    <content type="html"><![CDATA[<p>书接上文，前面我们简单地介绍了响应式编程（Reactive Programming）的一些基本思想，接下来我会通过实际例子，一步步演示如何将RP应用到实际的开发中去。因为<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>本身已经提供了非常好的Sample代码，所以我打算这里就通过复刻其中的GitHubSignup项目，来作为本次演示的主题。首先让我们来看看需要达到的效果：</p>

<p><img src="http://sherlockyao.com/images/20160216/signup.png" title="" alt="File Inspector" /></p>

<p>以下是我们将实现的主要功能（我这里省掉了提交表单的逻辑，其实现方法同其他的大同小异）：</p>

<ul>
<li>当用户在输入用户名时，实时去验证用户名是否可用，同时显示对应的验证结果</li>
<li>当用户在输入密码时，要验证是否大于3位，同时显示对应的验证结果</li>
<li>当用户重复密码时，要验证是否和第一次输入一致，同时显示对应的验证结果</li>
<li>当且仅当三个输入区域都验证通过时，提交按钮才可被点击，否则将禁用</li>
</ul>


<p>因为密码的验证不需要网络请求，完全在本地完成，所以我们先从这个比较简单的入手。验证过程是在每次用户键入密码时触发的，所以我们可以把它看作是一个输入流，用图形表示就是类似这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--t----t---t-----t------&gt;
</span><span class='line'>
</span><span class='line'>t表示的就是一次键盘输入事件</span></code></pre></td></tr></table></div></figure>


<p>不过我们不光需要知道输入事件，还需要知道输入事件产生时输入框内的文本内容，我们希望有一个这样的流：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--t----t---t-----t------&gt;
</span><span class='line'>  v    v   v     v
</span><span class='line'>-(1)-(12)-(123)-(1234)--&gt;</span></code></pre></td></tr></table></div></figure>


<p>大家马上会想到我们可以通过一个简单的map来搞定，不过RxSwift是非常贴心的，这么常用的功能它们已经提供了封装，我们可以直接拿来用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">passwordTextField</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">password</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">passwordTextField</span><span class="p">.</span><span class="n">rx_text</span> <span class="o">&lt;-&gt;</span> <span class="n">password</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">infix</span> <span class="kr">operator</span> <span class="o">&lt;-&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="o">&lt;-&gt;</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">property</span><span class="p">:</span> <span class="n">ControlProperty</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">variable</span><span class="p">:</span> <span class="n">Variable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">bindToUIDisposable</span> <span class="o">=</span> <span class="n">variable</span>
</span><span class='line'>        <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">property</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">bindToVariable</span> <span class="o">=</span> <span class="n">property</span>
</span><span class='line'>        <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">n</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>            <span class="p">},</span> <span class="nl">onCompleted</span><span class="p">:</span>  <span class="p">{</span>
</span><span class='line'>                <span class="n">bindToUIDisposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">StableCompositeDisposable</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">bindToUIDisposable</span><span class="p">,</span> <span class="n">bindToVariable</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，我们申明了一个password的Variable，为的是把UI中的值绑定到它上面，方便后面的使用，所使用的<code>&lt;-&gt;</code>绑定操作符是自定义的，可以在底部的方法中看到。可以看到，到目前为止我们其实就用了一行代码生成了需要的数据流，接下来就是验证数据，转化成我们真正需要的结果流了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="o">--</span><span class="n">t</span><span class="o">----</span><span class="n">t</span><span class="o">---</span><span class="n">t</span><span class="o">-----</span><span class="n">t</span><span class="o">------&gt;</span>
</span><span class='line'>  <span class="n">v</span>    <span class="n">v</span>   <span class="n">v</span>     <span class="n">v</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="mi">1234</span><span class="p">)</span><span class="o">--&gt;</span>
</span><span class='line'>  <span class="n">v</span>    <span class="n">v</span>   <span class="n">v</span>     <span class="n">v</span>
</span><span class='line'><span class="o">--</span><span class="n">F</span><span class="o">----</span><span class="n">F</span><span class="o">---</span><span class="n">F</span><span class="o">-----</span><span class="n">T</span><span class="o">------&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实现的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">passwordValidation</span> <span class="o">=</span> <span class="n">password</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">password</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">valid</span><span class="p">:</span> <span class="n">Bool</span><span class="o">?</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">numberOfCharacters</span> <span class="o">=</span> <span class="n">password</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">numberOfCharacters</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">numberOfCharacters</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Password must be at least 4 characters&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="s">&quot;Password acceptable&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们的验证逻辑很简单，看一下输入字符的长度，如果大于3位则通过。最后的<code>shareReplay</code>是RxSwift提供的一个流操作函数，作用是为了保证在观察者订阅这个流的时候始终都能回播最后一个（数字1表示回播的数量）流中的值，这样能使界面上正确显示验证的状态。现在我们有了需要的流，接下来就是创建一个观察者来订阅这个流，从而能把结果显示在界面上反馈给用户，直接看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">bindValidationResultToUI</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">(</span><span class="nl">valid</span><span class="p">:</span> <span class="n">Bool</span><span class="o">?</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">validationErrorLabel</span><span class="p">:</span> <span class="bp">UILabel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">source</span>
</span><span class='line'>        <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">validationColor</span><span class="p">:</span> <span class="bp">UIColor</span>
</span><span class='line'>  
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">valid</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">valid</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">validationColor</span> <span class="o">=</span> <span class="n">valid</span> <span class="o">?</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">greenColor</span><span class="p">()</span> <span class="o">:</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">validationColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">grayColor</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>            <span class="n">validationErrorLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">validationColor</span>
</span><span class='line'>            <span class="n">validationErrorLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">message</span> <span class="o">??</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bindValidationResultToUI</span><span class="p">(</span>
</span><span class='line'>            <span class="n">passwordValidation</span><span class="p">,</span>
</span><span class='line'>            <span class="nl">validationErrorLabel</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">passwordValidationLabel</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了一个帮助方法，它会订阅给定的验证流，并把结果显示在指定的Label上，怎么样是不是感觉非常简单，剩下要做的就是把刚才我们创建的密码验证流绑定到需要的标签上即可。依样画葫芦，接下来我们来创建重复密码的验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">repeatPasswordValidation</span> <span class="o">=</span> <span class="n">combineLatest</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">repeatedPassword</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">repeatedPassword</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">valid</span><span class="p">:</span> <span class="n">Bool</span><span class="o">?</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">repeatedPassword</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">repeatedPassword</span> <span class="o">==</span> <span class="n">password</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="s">&quot;Password repeated&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Password different&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我只贴出了核心的创建流的代码部分，其余的与验证密码都是雷同的。从上面的代码中可以看到，我们使用了combineLatest的函数来合并两个流，它的作用如下图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nl">X</span><span class="p">:</span> <span class="o">--</span><span class="mi">1</span><span class="o">----</span><span class="mi">2</span><span class="o">------------</span><span class="mi">3</span><span class="o">--</span><span class="mi">4</span><span class="o">--|-&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Y</span><span class="p">:</span> <span class="o">----</span><span class="n">A</span><span class="o">-----</span><span class="n">B</span><span class="o">---</span><span class="n">C</span><span class="o">--</span><span class="n">D</span><span class="o">--------|-&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">combineLatest</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">----</span><span class="mi">1</span><span class="n">A</span><span class="o">-</span><span class="mi">2</span><span class="n">A</span><span class="o">-</span><span class="mi">2</span><span class="n">B</span><span class="o">--</span><span class="mi">2</span><span class="n">C</span><span class="o">-</span><span class="mi">2</span><span class="n">D</span><span class="o">-</span><span class="mi">3</span><span class="n">D</span><span class="o">-</span><span class="mi">4</span><span class="n">D</span><span class="o">-|-&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见，它正好试用我们验证密码的场景，接下来就是简单的验证逻辑，如此我们便实现了重复密码的验证过程。现在让我们来看一下稍微复杂一点的逻辑，验证用户名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">usernameValidation</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="n">username</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">(</span><span class="nl">valid</span><span class="p">:</span> <span class="n">Bool</span><span class="o">?</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">username</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">just</span><span class="p">((</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">username</span><span class="p">.</span><span class="n">rangeOfCharacterFromSet</span><span class="p">(</span><span class="bp">NSCharacterSet</span><span class="p">.</span><span class="n">alphanumericCharacterSet</span><span class="p">().</span><span class="n">invertedSet</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">just</span><span class="p">((</span><span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Username can only contain numbers or digits&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">loadingValue</span> <span class="o">=</span> <span class="p">(</span><span class="nl">valid</span><span class="p">:</span> <span class="nb">nil</span> <span class="kt">as</span> <span class="n">Bool</span><span class="o">?</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="s">&quot;Checking availabilty ...&quot;</span> <span class="kt">as</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">usernameAvailable</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">available</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">available</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="s">&quot;Username available&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Username already taken&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="n">loadingValue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">switchLatest</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来具体分析一下整个过程，首先用户名的验证分为两个部分，一个本地合法性验证，另一个是远程的可用性验证，因为服务器验证涉及到异步，所以其验证结果本身就是一个流（拥有初始状态，结果状态）。然后我们来想象一下，当用户在输入用户名的时候，每当用户键入一个值，我们都需要去验证，但因为服务器验证是异步的，所以当用户键入下一字母的时候，前面的验证结果其实是没有用了，那我们应该怎么处理呢？switchLatest函数是我们的救星，下面是其官方文档的示意图：</p>

<p><img src="http://sherlockyao.com/images/20160216/switchlatest.png" title="" alt="File Inspector" /></p>

<p>简言之，switchLatest所操作的流其原本的每个值都是一个单独的流，经过处理后，它变成了一个单一的流，其中的每个值都是原本流当中最新流中的最新值。这就完美地解决了我们的问题，每当新的验证触发后，前一个验证流的值虽然还会产生，但是我们已经不去关心它了，从而不会对我们的结果产生影响。最后让我们来处理提交按钮的禁用逻辑，当我们用流的思路去考虑问题时，将发现这个需求简直太简单了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">signupEnabled</span> <span class="o">=</span> <span class="n">combineLatest</span><span class="p">(</span>
</span><span class='line'>    <span class="n">usernameValidation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">passwordValidation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">repeatPasswordValidation</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">repeatPassword</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">valid</span> <span class="o">??</span> <span class="nb">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">password</span><span class="p">.</span><span class="n">valid</span> <span class="o">??</span> <span class="nb">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">repeatPassword</span><span class="p">.</span><span class="n">valid</span> <span class="o">??</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">signupEnabled</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="n">valid</span>  <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">submitButton</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">valid</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">submitButton</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">valid</span> <span class="o">?</span> <span class="mf">1.0</span> <span class="o">:</span> <span class="mf">0.5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信大家现在一看这个代码就已经知道它的意思了，所以就不再赘述了。响应式编程提供给了我们一种完全不同的思维方式，即使不去实际应用，去学习它本身就是一个很有意义的事情，况且在交互越来越复杂的时代，它更是提供了一种清晰的解决方案。我自己还谈不上入门，但已跃跃欲试要好好专研一番，希望此文能给想入门的同道们一些帮助。</p>

<p>另附上<a href="https://github.com/sherlockyao/RxSwiftPractise">示例代码地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[响应式编程入门（上）]]></title>
    <link href="http://sherlockyao.com/blog/2015/11/10/head-first-reactive-programming-1/"/>
    <updated>2015-11-10T14:01:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/11/10/head-first-reactive-programming-1</id>
    <content type="html"><![CDATA[<p>Reactive Programming（响应式编程，以下简称RP）这个概念最近正火，本人也一直对其非常感兴趣，终于得了些空余时间可以学习下这门新技术，于是顺便整理些相关内容，希望可以帮助到一些想入门的朋友们。</p>

<p>我选择入门的框架是<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>，在过了一遍它官方提供的Tutorial playground代码后，发觉对RP的理念仍是一头雾水，一番Google后找到了这篇优秀的文章：<a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">The introduction to Reactive Programming you&rsquo;ve been missing</a>。读完之后醍醐灌顶，所以以下的博文内容我希望通过意译这篇文章结合RxSwift里的注册Sample来阐述RP的“流之世界观”（这个名称是我自己起的，因为一旦步入Reactive后，以往解决问题的思路将完全改变）。</p>

<p>RP的学习曲线是蛮高的，如果缺少好的资源的话就更难了。看library的文档往往使人一头雾水，而一些教程文章往往只是教你如何用相关的库，很少触及到其真正架构的思想，从而使人不得要领。学习RP最难的部分是：如何用Reactive的方式思考。它要求我们摒除掉以往编程时的那种老思路（状态化、命令式），用一种完成不同的视角去考虑问题。那么<strong>到底什么是响应式编程（Reactive Programming）？</strong></p>

<h2>响应式编程就是面向异步数据流的编程</h2>

<p>这并不是什么新东西，事件总线或者典型的点击事件们就是一个异步事件流，你可以监听这个流，同时做一些额外的处理业务。响应式无法就是把这个理念给发扬光大了：不光是点击或者悬停事件，你几乎可以给所有东西都创建数据流。流(Stream)是廉价的、无所不在的，任何东西都可以成为流：变量，用户的输入，属性，缓存，数据结构等等。举得例子：想象一个你的微信朋友圈动态就是同点击事件一样的一个数据流，你可以监听它同时对其进行对应的响应。</p>

<p>在这基础之上，你还拥有一套不可思议工具集去操作这些流：合并、创建、过滤等等。这就是所谓的“函数式（functional）”施展魔力的地方。一个甚至多个流可以被当做另一个流的输入；你可以合并两个流；你可以过滤一个流从而得到一个只包含你感兴趣事件的流；你还可以把一个流中的值映射成其他值从而形成一个新的流。</p>

<p>那让我们来仔细看一下“流”，拿我们熟悉的“点击按钮事件”流来举例：</p>

<p><img src="http://sherlockyao.com/images/20151110/stream.png" title="" alt="File Inspector" /></p>

<p>一个流就是一个按照时间排序的持续事件的序列，它会发出三种不同类型的东西：一个某种类型的值（Value）、一个错误（Error）、以及一个完成（Completed）的信号。比方说这个按钮所在的view或者window被关闭了，那么就会发出一个完成信号。我们可以定义不同的函数，使流分别在发出一个值、或者错误、或者完成信号时，执行不同的函数，从而异步地捕获这些发出的事件。有时候我们可以忽略错误和完成事件，只关心产生值的事件。而这个监听行为，我们称之为“订阅（subscribing）”，那些我们定义的函数，就称为“观察者（Observer）”，那些流则称为“对象（subject）”或者“可被观者物（observable）”。</p>

<p>为了方便绘制，我们可以用ASCII来重绘上图：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--a---b-c---d---X---|-&gt;
</span><span class='line'>
</span><span class='line'>a, b, c, d 是发出的值（Value）
</span><span class='line'>X 是一个错误（Error）
</span><span class='line'>| 是一个完成（completed）信号
</span><span class='line'>---&gt; 表示的是时间轴</span></code></pre></td></tr></table></div></figure>


<p>接下来让我们玩点有意思的，我们已经有了一个点击事件的流，现在让我们来建立一个记录点击次数的流。在通用的Reactive库中，每个流都提供了很多有用的方法来使用，比如map、filer、scan等等。当你调用其中一个方法时，比如<code>clickStream.map(f)</code>，它会返回一个基于点击事件流的新流，它并不会对原来的流做任何改动。这是一个叫做不可变（immutability）的特性，它和Reactive中的流是比目连枝的。这就使得我们可以通过链式调用来生成新的流，比如：<code>clickStream.map(f).scan(g)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  clickStream: ---c----c--c----c------c--&gt;
</span><span class='line'>
</span><span class='line'>                  v  map(c becomes 1) v
</span><span class='line'>  
</span><span class='line'>               ---1----1--1----1------1--&gt;
</span><span class='line'>  
</span><span class='line'>                  v      scan(+)      v
</span><span class='line'>
</span><span class='line'>counterStream: ---1----2--3----4------5--&gt;</span></code></pre></td></tr></table></div></figure>


<p>其中<code>map(f)</code>会根据你提供的f函数把输入流中的每个值转化到新的流中去，在上面的例子里，我们将每个点击映射成了数字1。<code>scan(g)</code>则是把所有早先的值聚合成一个新值的函数，新值的计算公式是：<code>x = g(accumulated, current)</code>，当前的例子中，g就是一个简单的add(+)函数。就这样，counterStream变成了一个在每次点击时，都会产生一个点击总数的流。</p>

<p>现在让我们来看下Reactive的真正魔力，比方说我们现在需要一个“双击事件”的流，为了提升点难度，我们再假设“三击事件”也需要同双击一样被监听，或者更狠一点，任意的“多次连击事件”都需要被监听。好，冷静，先让我们来想象一下如果用传统的实现方式你会怎么做？我敢打赌那样的代码一定会恶心到自己，需要定义一些变量来记录状态，同时还要对时间间隔做一些必要的处理。</p>

<p>但是，在Reactive的世界里，这是相当简单的事情。实际上只需要4行代码就可以搞定了，不过先让我们撇开代码，无论你是一个菜鸟还是专家，用时间流图的方式去思考是理解如何创建流的最佳方式：</p>

<p><img src="http://sherlockyao.com/images/20151110/click-stream.png" title="" alt="File Inspector" /></p>

<p>上图灰框里是把一个流转化成另一个流的函数。第一个函数的作用就是把流中的点击事件按照最大250毫秒间隔累计起来成为一个列表流（不要担心不懂这些函数的功能，目前我们只是在演示响应式的思想）。然后我们再通过<code>map()</code>把结果映射成每个列表中元素数量的流，这样我们就获得了连击次数了。最后我们用一个过滤函数过滤了连击数是1的值，这样我们就订阅（subscribe)/监听(listen)这个结果流来实现我们想要的功能了。</p>

<p>怎么样，这样的解决思路是不是很优美？这个例子只是响应式编程的冰山一角，你可以在任何流上都应用这样的操作，比如说一个API请求相应的流，另一方面，这样的函数有非常之多。</p>

<p><strong>那我们为什么要用响应式编程呢？</strong></p>

<p>RP提升了你代码的抽象级别，所以你只需要专注于那些业务逻辑中相互关联的事件，而不需要一直纠结在所有的实现细节中。RP中的代码会更简明。</p>

<p>在现代那些有着大量UI交互元素，同时每个交互又有其相关联的数据事件的webapp和手机应用中，RP的益处就更大了。10年前，一个网页的交互可能只是简单的提交一份表单给后端，然后在前端展现一些数据；但如今，应用已经进化成更实时的体验：修改表单中某一项的值可能就自动触发了一个后台保存的事件，“给别人点赞”这样一个操作会实时地反馈到被点赞的用户那边，这样的用例非常之多。所以我们需要一些工具来处理这种实时性的需求，响应式编程就是目前最佳的选择。</p>

<p>（待续……）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Block时何时需要WeakSelf和StrongSelf?]]></title>
    <link href="http://sherlockyao.com/blog/2015/08/08/weakself-and-strongself-in-blocks/"/>
    <updated>2015-08-08T15:36:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/08/08/weakself-and-strongself-in-blocks</id>
    <content type="html"><![CDATA[<p>现在我们用 Objective-C 写代码时已经越来越多地用到了block，相比delegate的回调方式，block更直观易用。相信每个使用过block的人都遇到过block中使用self时需要weakself的情况，以下就是非常典型的一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">__weak</span> <span class="n">__typeof</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">context</span> <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">__strong</span> <span class="n">__typeof</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">)</span><span class="n">strongSelf</span> <span class="o">=</span> <span class="n">weakSelf</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于小白的我一般越到这种情况就是直接拷贝上面这个模板到需要的代码中去，而不知个中原委。但作为一个合格的程序员，是需要完完全全明白自己写的每一行代码是在做什么的，所以现在就简单说明一下这个 WeakSelf 和 StrongSelf 到底是什么。首先看下面这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.2</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">myView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ARC环境下的，每个block在创建时，编译器会对里面用到的所有对象自动增加一个reference count，然后当block执行完毕时，再释放这些reference。针对上面的代码，在animations block执行期间，self（假设这里的self是个view controller）的引用数会被加1，执行完后再次减1。但这种情况下为什么我们一般不会去weakify self呢？因为这个block的生命周期是明确可知的，在这个block执行期间当前的view controller一般是不会被销毁的，所以不存在什么风险。现在我们看下面这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSBlockOperation</span> <span class="o">*</span><span class="n">op</span> <span class="o">=</span> <span class="p">[[[</span><span class="bp">NSBlockOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">op</span> <span class="nl">addExecutionBlock</span><span class="p">:</span><span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">doMoreThing</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，我们并不知道这个execution block什么时候会执行完毕，所以很有可能发生的情况是，我在block还没执行完毕时就想销毁当前对象（比方说用户关闭了当前页面），这时就会因为block还对self有一个reference而没有立即销毁，这会引起很多问题，比方说你写在<code>- (void)dealloc {}</code>中的代码并不能马上得到执行。所以为了避免这种情况，我们会在block前加上<code>__weak __typeof(self)weakSelf = self;</code>的定义来使block对self获取一个弱引用（也就是refrence count不会加1）。</p>

<p>那block中的StrongSelf又是做什么的呢？还是上面的例子，当你加了WeakSelf后，block中的self随时都会有被释放的可能，所以会出现一种情况，在调用doSomething的时候self还存在，在doMoreThing的时候self就变成nil了，所以为了避免这种情况发生，我们会重新strongify self。一般情况下，我们都建议这么做，这没什么风险，除非你不关心self在执行过程中变成nil，或者你确定它不会变成nil（比方说所以block都在main thread执行）。</p>

<p>好了，简要的说明到此结束，想要详细了解的可以自行google，这类文章很多。前面代码中的WeakSelf、StrongSelf转换看起来很冗长，不利于阅读代码，下面介绍一个超好用的宏定义代码，它是这个开源库的一部分：<a href="https://github.com/jspahrsummers/libextobjc">libextobjc</a>。把它加入到项目中后，就可以用以下如此简洁的格式来完成转换啦：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;EXTScope.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">weakify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">context</span> <span class="nl">performBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">strongify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UITableView 使用小贴士]]></title>
    <link href="http://sherlockyao.com/blog/2015/06/28/uitableview-tips/"/>
    <updated>2015-06-28T15:27:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/06/28/uitableview-tips</id>
    <content type="html"><![CDATA[<p>UITableView 可以说是搭建应用时必不可少的控件之一，同时也是最常见、遇到最多自定义需求的控件之一，所以今天这里总结了几个平时使用时的小技巧，给自己备忘的同时也分享给大家。</p>

<h3>> 去除多余的Separator</h3>

<p>有时，我们会使用到table view自带的行分隔线样式，但是会遇到一个问题，就是当列表内没有cell时，或者cell数量不足以填充列表可见高度时，列表仍然会显示额外的分隔线。一个快速的解决方案是给table view设置一个空白的footer view：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">tableView</span><span class="p">.</span><span class="n">tableFooterView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>> 设置初始显示位置</h3>

<p>在一些用例场景中，我们会要求当用户进入到一个列表页面时，他需要首先看到列表最底部的cell（或者其他一些位置不在top的cell）。通常我们第一反应便是在 UIViewController 的 viewWillAppear: 方法中用代码把table view滚动到需要的位置，但实际上这个方案并不奏效（造成这个的原因是，在viewWillAppear的这个阶段，view还没有真正地去layout，所以table view此时还不知道它真正的content size，也就无法滚动到正确的位置）；紧接着，我们会尝试把代码移动到 viewDidAppear: 方法中，结果确实起作用了，但是用户会在视觉上看到一个滚动的过程，所以并不理想。这里提供一种比较trick的解决方案来处理这个问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLayoutSubviews</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLayoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">hasFinishedLayoutView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">hasFinishedLayoutView</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span> <span class="c1">// 这里用一个flag来避免多次执行</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSIndexPath</span><span class="o">*</span> <span class="n">indexPath</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// 定义要滚动到的位置</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">scrollToRowAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span> <span class="nl">atScrollPosition</span><span class="p">:</span><span class="n">UITableViewScrollPositionBottom</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把滚动代码移到 viewDidLayoutSubviews 这个生命周期方法中去，这样就可以成功了。注意一点：我这里手动调用了一下table view的layoutIfNeeded方法，因为在我的实践中，我的view都是用autolayout来构建的，如果这里不手动layout一下，table view的内容大小在这个阶段还是不正确的。</p>

<h3>> 随着Cell一起滚动的Section Header</h3>

<p>UITableView的section header view有一个自带的炫酷功能，就是浮动(floating)，当列表滚动的时候，它会自动附着在顶部直到其他Section的内容把它顶掉。但是我们有时候不想要这样的效果，我们希望它能跟着cell一起滚动，那应该怎么处理呢？很不幸的是，官方公开的API中并不提供这种选项，那怎么办呢？我自己选择的一种解决方案就是，用cell的方式来实现header的功能：1）去掉所有section header的定义； 2）自己维护好DataSource的index path关系，每个section的第一行是header cell，接下去的才是真正展示数据的cell。</p>

<h3>> 自适应高度的Cell（Self-Sizing Cell）</h3>

<p>关于这个话题，网上已经有很多教程了，我这里就不再赘述，而是列出一些关键点以供备忘用。因为要能灵活运用这个功能，了解其原理是很重要的，tips只是为了不违背“好记性不如烂笔头”这个亘古不变的告诫，所以如果大家对其仍一知半解的话，建议看WWDC官方视频深入了解一下。<a href="https://developer.apple.com/videos/wwdc/2014/#226">视频链接请戳这里</a></p>

<p>下面是一些要点：</p>

<ul>
<li><p>把UITableView的<strong>rowHeight</strong>属性设置成<strong>UITableViewAutomaticDimension</strong></p></li>
<li><p>把UITableView的<strong>estimatedRowHeight</strong>属性设置成适合实际情况的估算值</p></li>
<li><p>如果使用Autolayout约束的方式来定义cell的高度，一定要加足够多的约束，从而能让cell通过这些约束计算出对应的高度。比如：一个只显示一个UILabel的cell，我们要给label同时加上距离ContentView top和bottom两个约束，这样cell才能通过label内容的高度，再加上上下距离来确定cell需要的实际高度是多少。</p></li>
<li><p>一般涉及到动态高度的情况都会有UILabel元素的加入，所以如果想要通过label的内容来扩大cell高度的话，记得要把numberOfLines属性设置成0</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 UIActivityViewController 添加自定义的 UIActivity 选项]]></title>
    <link href="http://sherlockyao.com/blog/2015/06/09/custom-uiactivity/"/>
    <updated>2015-06-09T15:13:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/06/09/custom-uiactivity</id>
    <content type="html"><![CDATA[<p>在现今开发应用的过程中，为其添加分享功能几乎成了一个不可或缺的需求。而 iOS 里的 UIActivityViewController 为我们提供了一种非常简单、快速的实现方案，因此往往成为初期快速迭代中的第一选择。但是，其自带的 Activity Type 毕竟有限，所以有时我们需要添加一些自定义的类型来满足需求。这里我就简单说明一下如何通过继承 UIActivity 来添加自定义选项。</p>

<p>首先，让我们再简单认识一下UIActivityViewController，它到底是用来做什么的呢？（UIActivityViewController自从 iOS6 开始便被加入到 API 中，要具体了解请看<a href="http://nshipster.com/uiactivityviewcontroller/">此文</a>）总得来说，它主要做两件事：</p>

<ul>
<li><p>它从你的应用接收各种对象数据，可以是 NSString, NSAttributedString, NSURL, UIImage 等等，它们被称为 Activity Items。</p></li>
<li><p>它管理着所有的 Activities，它把接收到的数据传递给每个 Activity，同时展示给用户；这些 Activities 包括系统自带的，用户自定义的，以及来自 Share and Action Extensions 的。</p></li>
</ul>


<p>它展示的界面效果是这样的：</p>

<p><img src="http://sherlockyao.com/images/20150609/uiavc.png" title="" alt="File Inspector" /></p>

<p>它把 Activities 分成了上下两部分，上面的都是属于 Share 类别的，而下面的则是 Action 类别。UIActivityViewController 的 UI 界面是系统生成的，不支持自定义，所以如果对界面有特殊要求的话，恐怕只能自己去实现相应的功能了（这里有一个<a href="https://github.com/overshare/overshare-kit">开源库</a>可以参考），但是你也失去了其他应用实现的 Share Extensions 和 Action Extensions 的支持了。</p>

<p>言归正传，我们来看一下如何添加一个自定义的分享选项。其实过程非常简单，你只需要新建一个类，把它作为 UIActivity 的子类，然后重载以下这些方法：</p>

<ul>
<li><p><code>+ (UIActivityCategory)activityCategory</code> 这个方法就是告诉系统这个 Activity 是 Action 类型还是 Share 类型，默认是 Action，所以我们这里要返回 UIActivityCategoryShare。</p></li>
<li><p><code>- (NSString *)activityType</code> 用来区分不同 activity 的字符串，用你的 bundle id 做前缀就会避免冲突</p></li>
<li><p><code>- (NSString *)activityTitle</code> 显示在选项图标下的文字</p></li>
<li><p><code>- (UIImage *)activityImage</code> 图标素材，这里要注意的是，目前只有 iOS 8 才支持显示彩色的图标，在这之前，你所提供的素材其实是作为 mask 来使用的，显示的则是黑白效果</p></li>
<li><p><code>- (BOOL)canPerformWithActivityItems:(NSArray *)activityItems</code> 这里就是你通过 items 来判断当前 Activity 是否支持，如果不支持（返回No），则当前选项不会在界面中显示出来</p></li>
<li><p><code>- (void)prepareWithActivityItems:(NSArray *)activityItems</code> 为分享做准备，你必须在这里把这些 items 保存下来，然后做一些适当的准备工作</p></li>
<li><p><code>- (void)performActivity</code> 真正执行 share 动作的地方，这里要注意的是，不管分享成功与否，都要在结束后调用 <code>- (void)activityDidFinish:(BOOL)completed</code> 这个方法来通知系统分享结束了</p></li>
</ul>


<p>实现好我们自定义的选项后，使用起来就非常简单了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span><span class="o">*</span> <span class="n">activities</span> <span class="o">=</span> <span class="l">@[</span> <span class="p">[</span><span class="n">CustomActivity1</span> <span class="n">new</span><span class="p">],</span> <span class="p">[</span><span class="n">CustomActivity2</span> <span class="n">new</span><span class="p">]</span> <span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="p">[[</span><span class="bp">UIActivityViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithActivityItems</span><span class="p">:</span><span class="n">activityItems</span> <span class="nl">applicationActivities</span><span class="p">:</span><span class="n">activities</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多详细内容请点击这篇<a href="http://getnotebox.com/developer/uiactivityviewcontroller-ios-8/">参考文章</a>继续阅读</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Data 中‘一对一’到‘一对多’关系的轻量级迁移]]></title>
    <link href="http://sherlockyao.com/blog/2015/06/08/core-data-migration-from-to-one-to-to-many/"/>
    <updated>2015-06-08T14:14:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/06/08/core-data-migration-from-to-one-to-to-many</id>
    <content type="html"><![CDATA[<p>这次分享一个关于 Core Data 数据迁移的小经验。工作中遇到需求，要将原有数据结构中的一个 To-One 关系改成 To-Many（比方说把一个 Book 对应一个 Author 的关系改成对应多个 Authors）。根据 Core Data 的文档：</p>

<blockquote><p>Changing a relationship from a to-one to a to-many, or a non-ordered to-many to ordered (and visa-versa)</p></blockquote>

<p>轻量级迁移（Lightweight Migration）是完全可以做到的。于是立刻添加了新的 Model Version，然后修改了对应的 relationship，同时也把对应 Managed Object 中的 property 手动改成 NSSet，以及添加了 add 和 remove 的方法（当然也可以用 Xcode 去自动生成新的类文件）。在调整了对应的逻辑代码后运行应用，发现迁移是成功的，数据没有丢失，但是原先那个一对一的关系数据没有迁移到新的一对多关系里（也就是所有 Book 和 Author 的对应关系消失了）。</p>

<p>看这个现象，数据是没有丢失的，所以应该是原来的对应关系没有顺利转化到新的这个多对多关系表中。回想整个迁移过程，我意识到一点，就是我把 Book 中原来的 author 属性改名成了 authors，这在逻辑上讲是理所当然的，但程序可没那么智能，所以应该是这里出了问题。</p>

<p>解决方法：在Xcode中选择 authors 这个关系，然后在右边的 Inspector 中找到 &ldquo;Renaming ID&rdquo; 这个选项，在里面填上 &ldquo;author"，这样程序才能知道这个属性是从原来的 author 属性改名而来，数据当然也能成功迁移了。果然再次把应用回退到老版本后安装新版本，对应关系顺利地展示了出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Content Hugging vs. Compression Resistance]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/18/hugging-vs-resistance/"/>
    <updated>2015-04-18T16:32:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/18/hugging-vs-resistance</id>
    <content type="html"><![CDATA[<p>iOS Auto Layout中的Content Hugging（内容吸附）和Compression Resistance（压缩阻力）曾一度让我非常困惑，看过一些说明的文章后当时觉得豁然开朗，但一段时间后便又忘记了，所以我决定再一次全面地整理一下并用博客的形式分享出去，这样可以帮助我自己加强记忆。
(注：“内容吸附”和“压缩阻力”是特别借用了objccn里文章的翻译内容，非常感谢作者，<a href="http://objccn.io/issue-3-5/">原文链接</a>)</p>

<p>首先，我们先简单说明一下约束（Constraint）中的Priority概念：Auto Layout中，每个约束都有一个1-1000的priority值，其中1000是其默认的值，也是 NSLayoutPriorityRequired 的，意思就是这个约束必须完全得到满足；所有小于1000的值则都是非强制的。系统在实现自动布局时，首先会满足所有priority是1000的约束，然后按照从大到小的值依次去尽量满足非强制性的约束，这种情况下，系统会尽量使结果的值接近于约束要求的值。</p>

<p>现在让我们来具体说明一下Hugging和Resistance到底是什么，用通俗易懂的话来描述的话是这样的：</p>

<ul>
<li>Content Hugging：我的内容区域不想被扩展（变高或变宽）</li>
<li>Compression Resistance：我的内容区域不想被压缩 （变矮或变短）</li>
</ul>


<p>注意到了吧，描述里面都有“内容区域”这个概念，这个指的就是Intrinsic Content Size，所以压缩阻力和内容吸附只对定义了Intrinsic Content Size的UI元素有效，否则的话就不存在所谓的“我的内容区域”的概念了。</p>

<p>下面就以一个具体的例子来说明一下这两个属性的作用。假设我们有一个Button放置在界面中，同时设置了两个priority是500的约束：左右各距离父元素 30 points，即如下图所示：</p>

<blockquote><p>|-30-[     Button     ]-30-|</p></blockquote>

<p>此时，如果我们给它设置一个水平priority是750的 Content Hugging 属性，那我们将看到它的实际布局会变成这样：</p>

<blockquote><p>|&mdash;-60&mdash;[Button]&mdash;60&mdash;-|</p></blockquote>

<p>但是如果这个 Content Hugging 属性的priority是小于500的，那我们看到的效果和初始状态是一样的：</p>

<blockquote><p>|-30-[     Button     ]-30-|</p></blockquote>

<p>然后，因为某些原因，它的父元素的宽度变窄了，在没有任何 Compression Resistance 属性时，它就变成了这样（按钮的文字显示不全了）：</p>

<blockquote><p>|-30-[But..]-30-|</p></blockquote>

<p>此时，如果我们给它设置一个水平priority是750的 Compression Resistance 属性，结果就会是：</p>

<blockquote><p>|-25-[Button]-25-|</p></blockquote>

<p>同样的，如果这个属性的优先级小于500，那结果就没有变化。另外，如果我们把初始的两个左右边距的约束优先级调整到1000，那不管我们怎么设置压缩阻力或内容吸附的属性，都不会改变布局效果，这个按钮会始终保持左右边距30的布局。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的UI并发处理方案]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/17/no-blocking-ui-cell-update/"/>
    <updated>2015-04-17T14:36:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/17/no-blocking-ui-cell-update</id>
    <content type="html"><![CDATA[<p>让用户体验更流畅是大部分应用必须要考虑的方面，我们知道iOS应用中所有UI相关的更新操作必须在主线程中进行，所以一个提升应用流畅性的大原则便是：尽量把那些耗时多，但不与UI更新直接相关的工作移出主线程。以下我将用一个比较常见的TableView Cell更新的例子来展示一下处理UI并发的几个最佳实践。我们的目标是让应用能在处理大量运算的同时，又能及时响应用户的交互以及界面上的事件。</p>

<p>假设我们有一个列表界面，每一行需要显示一个店铺的信息，通常的方案便是Subclass一个TableViewCell，然后提供自定义的方法接收店铺信息数据，并更新到UI上，大致代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp"># StoreInfoCell : UITableViewCell</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">StoreInfoCell</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>需求变化是软件开发的常态，不久PM便会说，在原有的店铺信息中，现在又增加了这个店铺过去七天的客流数据，于是要求应用能在Cell中多显示一个柱状图来表示这个客流数据。我们先来实现这个功能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">HistogramTool</span> <span class="nl">generateImageForTrafficData</span><span class="p">:</span><span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>功能已经实现，但是因为HistogramTool这个工具去生成柱状图耗时相当久，我们在运行应用测试时会发现滚动列表界面时有严重的卡顿。接下来我们就来进行优化，显而易见是generateImageForTrafficData这个方法阻塞了主线程从而造成卡顿，我们可以把它移到其他线程中去处理，这里我们采用GCD来实现这个方案：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="bp">UIImage</span> <span class="o">*</span><span class="n">histogramImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">HistogramTool</span> <span class="nl">generateImageForTrafficData</span><span class="p">:</span><span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">];</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">histogramImage</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过上面的改进后，我们将看到页面的滚动变得流畅了，但是会发现页面有闪烁的现象，Cell上的柱状图会出现自我切换的问题，同时数据似乎会不匹配，这是为什么呢？原因就在于Reuse Cell，为了提升性能，所有TableView中的Cell都是从它的Reuse Pool中获取来的，所以当快速滚动列表时，新出现的Cell实例其实是一些已经移出界面可视范围被回收了的老Cell实例，但它们被回收时并没有取消异步生成柱状图的过程，所以当它们生成完后会又更新到界面上，这就会造成第7行的Cell显示出了第1行店铺的柱状图，然后过了一会儿又更新成了第7行店铺自己的柱状图。为了解决信息不匹配的问题，我们可以在更新前做一个check：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">TrafficData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>      <span class="bp">UIImage</span> <span class="o">*</span><span class="n">histogramImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">HistogramTool</span> <span class="nl">generateImageForTrafficData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span><span class="p">.</span><span class="kt">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">histogramImage</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样虽然解决了信息不匹配的问题，但却还是消耗了很多不必要的计算资源，因为当cell被移出屏幕后，对应cell的柱状图计算过程仍然还在queue中，我们应该取消它们，于是我们引入NSOperationQueue来进一步优化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">queue</span> <span class="n">cancelAllOperations</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">asyncDisplayHistogramImage</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">asyncDisplayHistogramImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSBlockOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">__weak</span> <span class="bp">NSBlockOperation</span> <span class="o">*</span><span class="n">weakOperation</span> <span class="o">=</span> <span class="n">operation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">operation</span> <span class="nl">addExecutionBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">weakOperation</span> <span class="n">isCancelled</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">TrafficData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">histogramImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">HistogramTool</span> <span class="nl">generateImageForTrafficData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">weakOperation</span> <span class="n">isCancelled</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span><span class="p">.</span><span class="kt">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">histogramImage</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，现在我们有了取消计算的机制，但是如果用Time Profiler工具去查看应用运行情况时会发现，当快速滚动列表时，还是有一些时间浪费在不必要的计算上，这是因为在调用generateImageForTrafficData这个方法前并没有等待时间，当一个cell被显示在页面上时，它便已经开始了这个计算过程，而因为快速滚动的缘故它又被移出了界面，所以这个计算过程其实是浪费了的。所以我们可以加上一些等待时间来继续优化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">displayStoreInfo:</span><span class="p">(</span><span class="n">StoreInfo</span> <span class="o">*</span><span class="p">)</span><span class="nv">storeInfo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">addressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">cancelPreviousOperations</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">asyncDisplayHistogramImage</span><span class="p">)</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">0.3</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">asyncDisplayHistogramImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSBlockOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">__weak</span> <span class="bp">NSBlockOperation</span> <span class="o">*</span><span class="n">weakOperation</span> <span class="o">=</span> <span class="n">operation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">operation</span> <span class="nl">addExecutionBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">weakOperation</span> <span class="n">isCancelled</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">TrafficData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">storeInfo</span><span class="p">.</span><span class="n">trafficData</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">histogramImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">HistogramTool</span> <span class="nl">generateImageForTrafficData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">weakOperation</span> <span class="n">isCancelled</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="p">.</span><span class="kt">id</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">trafficData</span><span class="p">.</span><span class="kt">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">histogramImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">histogramImage</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">cancelPreviousOperations</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="bp">NSObject</span> <span class="nl">cancelPreviousPerformRequestsWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">asyncDisplayHistogramImage</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">queue</span> <span class="n">cancelAllOperations</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 然后在对于的TableView Delegate中也加上取消操作</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didEndDisplayingCell:</span><span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nv">cell</span> <span class="nf">forRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span><span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">cell</span> <span class="n">cancelPreviousOperations</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上一些方法，你将体会到流畅性上很大的提升，当然你还可以考虑加入image cache来再进一步优化。总之这里就是展示了一些UI并发处理的思路，希望抛砖引玉让大家打造出性能卓越的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Navigation Bar样式]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/16/customize-navigation-bar-style/"/>
    <updated>2015-04-16T15:51:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/16/customize-navigation-bar-style</id>
    <content type="html"><![CDATA[<p>在开发iOS应用时，自定义Navigation Bar样式是非常普遍的一个需求，所以这里特别整理了一些常见的情况，以供快速查阅。照旧先附上参考的原文<a href="http://www.appcoda.com/customize-navigation-status-bar-ios-7/">链接</a>。</p>

<h3>> 更改导航栏背景色</h3>

<p>这个应该是最常见的需求了，同时也只需一行代码就可以实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="bp">UINavigationBar</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setBarTintColor</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>> 更改导航栏标题的样式</h3>

<p>有时我们需要修改标题成特殊的字体样式以达到设计上得效果，可以通过设置titleTextAttributes的属性来实现，以下是一些常用的key，同时附上实现代码：</p>

<ul>
<li>UITextAttributeFont – Key to the font</li>
<li>UITextAttributeTextColor – Key to the text color</li>
<li>UITextAttributeTextShadowColor – Key to the text shadow color</li>
<li>UITextAttributeTextShadowOffset – Key to the offset used for the text shadow</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSShadow</span> <span class="o">*</span><span class="n">shadow</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSShadow</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">shadow</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">grayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">shadow</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">[[</span><span class="bp">UINavigationBar</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setTitleTextAttributes</span><span class="p">:</span> <span class="l">@{</span>
</span><span class='line'>  <span class="nl">NSForegroundColorAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">],</span>
</span><span class='line'>  <span class="nl">NSShadowAttributeName</span> <span class="p">:</span> <span class="n">shadow</span><span class="p">,</span>
</span><span class='line'>  <span class="nl">NSFontAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">fontWithName</span><span class="p">:</span><span class="s">@&quot;HelveticaNeue&quot;</span> <span class="nl">size</span><span class="p">:</span><span class="mf">21.0</span><span class="p">]</span>
</span><span class='line'><span class="l">}</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些设计会要求使用logo或其他更复杂的内容代替文字显示在标题位置，这个时候我们可以通过设置navigationItem的titleView来实现这些需求，这里以简单地替换成图片为例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 这里的viewController就是对应的要替换标题的那个view controller，而不是navigation controller本身</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">titleView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;title&quot;</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>> 修改导航栏上按钮的颜色</h3>

<p>我们可以通过设置tintColor来实现，要注意的是，这个颜色会同时影响到所有按钮上的文字和图片：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="bp">UINavigationBar</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setTintColor</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>> 添加更多的导航栏按钮</h3>

<p>这种情况下，我们可以通过设置leftBarButtonItems和rightBarButtonItems来实现，直接给出一段实例代码，大家一看就懂：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIBarButtonItem</span> <span class="o">*</span><span class="n">markItem</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBarButtonItem</span> <span class="nl">barItemWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;mark&quot;</span><span class="p">]</span> <span class="nl">selectedImage</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">size</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">markButtonClicked</span><span class="p">:)];</span>
</span><span class='line'><span class="bp">UIBarButtonItem</span> <span class="o">*</span><span class="n">starItem</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBarButtonItem</span> <span class="nl">barItemWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;star&quot;</span><span class="p">]</span> <span class="nl">selectedImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;star_selected&quot;</span><span class="p">]</span> <span class="nl">size</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">starButtonClicked</span><span class="p">:)];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItems</span> <span class="o">=</span> <span class="l">@[</span><span class="n">starItem</span><span class="p">,</span> <span class="n">markItem</span><span class="l">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim无法打开Swap文件的错误]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/15/vim-swap/"/>
    <updated>2015-04-15T10:12:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/15/vim-swap</id>
    <content type="html"><![CDATA[<p>事件之始是本人的老Mac加装SSD硬盘后在新系统中的一次git commit，提交失败，原因是用vim写comment的时候保存不成功，在提示信息中有如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to open swap file for "{filename}", recovery impossible</span></code></pre></td></tr></table></div></figure>


<p>因为我是在装完新系统后，把老硬盘里的配置文件都拷到新硬盘了，所以在我的.vimrc文件中确实是单独设置了swap的目录：<code>set directory=~/.vim/tmp</code>，于是首先怀疑是对应的目录不存在，如果是这种情况，可以使用<code>mkdir -p ~/.vim/tmp</code>这个命令去创建目录，但我的情况是这个目录已经存在。经过ls命令观察该目录内容，突然发现它的所有者是root用户的，恍然大悟，只要把它换成当前使用的用户名就可以了，于是用以下命令便可解决问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -Rv username .vim
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上安装Ruby on Rails]]></title>
    <link href="http://sherlockyao.com/blog/2015/04/14/set-up-rails-on-mac/"/>
    <updated>2015-04-14T19:48:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/04/14/set-up-rails-on-mac</id>
    <content type="html"><![CDATA[<p>Mac加了SSD硬盘，重装了系统，所以需要重新安装Rails，找到一篇文章一步步照着来做，顺带记录下步骤分享给需要的人。本人Mac系统版本10.10.3。(<a href="https://gorails.com/setup/osx/10.10-yosemite">原文链接</a>)</p>

<ul>
<li>安装Homebrew</li>
</ul>


<p>Homebrew能帮我们更便捷地从源代码编译安装其他软件，在Terminal里运行以下命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Ruby</li>
</ul>


<p>原先是用rvm来安装ruby的，这里用的是rbenv，据同事说这个比rvm更好用，总之照着下面的命令来吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install rbenv ruby-build
</span><span class='line'>
</span><span class='line'><span class="c"># Add rbenv to bash so that it loads every time you open a terminal</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># Install Ruby</span>
</span><span class='line'>rbenv install 2.2.1
</span><span class='line'>rbenv global 2.2.1
</span><span class='line'>ruby -v
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Rails</li>
</ul>


<p>Terminal里运行以下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install rails -v 4.2.0
</span><span class='line'>
</span><span class='line'><span class="c">#在这个过程中本人遇到安装失败，提示运行以下命令</span>
</span><span class='line'>xcode-select --install
</span></code></pre></td></tr></table></div></figure>


<p>装完rails，为了能让rails成为可执行命令，还需要运行以下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<p>OK，大功告成，最后分享一条Tip：
平时国内网络下安装gem包总是会连接不上，淘宝提供了mirror，所以可以用下面的命令把地址转到淘宝的链接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle config mirror.https://rubygems.org http://ruby.taobao.org
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的毛玻璃效果View]]></title>
    <link href="http://sherlockyao.com/blog/2015/01/06/blur-effect-view/"/>
    <updated>2015-01-06T13:37:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/01/06/blur-effect-view</id>
    <content type="html"><![CDATA[<p>在iOS升级到7时，巨大的UI风格改变给我们带来了全新的视觉感受，而那个独特的Navigation Bar毛玻璃(模糊背景)效果更是让很多人赞叹不已。现在iOS 8中Apple已经添加了UIKit层对这个Blur Effect的原生支持，我是以WWDC 2014中某一个视频为契机找到了相关的内容，特此整理和记录下。我只是简单地做个Note，<a href="http://www.tuicool.com/articles/mqUj2eY">这里</a>有个较完整的说明，想更深入了解的朋友请自行Google，关键词：UIBlurEffect、UIVibrancyEffect、UIVisualEffectView。</p>

<p>在最新的XCode里，IB中的Object Libary已经默认自带Visual Effect View的控件，可以直接拖拽使用，非常方便。如果想用代码来添加的话，大致是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">UIVisualEffect</span> <span class="o">*</span><span class="n">effect</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBlurEffect</span> <span class="nl">effectWithStyle</span><span class="p">:</span><span class="n">UIBlurEffectStyleLight</span><span class="p">];</span>
</span><span class='line'>  <span class="n">UIVisualEffectView</span> <span class="o">*</span><span class="n">effectView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIVisualEffectView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithEffect</span><span class="p">:</span><span class="n">effect</span><span class="p">];</span>
</span><span class='line'>  <span class="n">effectView</span><span class="p">.</span><span class="n">contentView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithWhite</span><span class="p">:</span><span class="mf">0.7</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">0.3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">blurView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">effectView</span><span class="p">];</span>
</span><span class='line'>  <span class="n">effectView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">blurView</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，就算用代码也非常简便，和使用其他UI元素一样，创建并加入到view的tree中(当然也可以用autolayout来控制位置)。附赠一个小贴士，经过测试，如果加入了visual effect view后，再去修改其父view(上面代码中的self.blurView)的alpha值时，其模糊效果就会失效了，具体底层原因是什么还没深究过，这只是我个人的实践结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何部署一个Node.js项目]]></title>
    <link href="http://sherlockyao.com/blog/2014/11/10/deploy-node-project/"/>
    <updated>2014-11-10T10:33:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/11/10/deploy-node-project</id>
    <content type="html"><![CDATA[<p>工作中的项目需要一个简单的Web服务器，考虑到Node.js快捷方便的特性就选择它来搭建。在开发阶段，使用node命令就能很快速地启动服务器来调试，但是到实际部署阶段，就要考虑把它放到一个单独的后台进程去运行，同时一般还会需要Nginx来做反向代理，所以在Google上搜了一通后选择了Nginx + Upstart + Node的组合方式。这里我就大致记录下自己的配置步骤，以供像我一样初次部署的生手参考。(注：我们用的是ubuntu的部署系统，所以以下所有命令都是以ubuntu上的形式给出)</p>

<p>首先是安装各种必要的程序：Nginx, Node, Vi等，这里就不说明了。安装完毕后，我们先单独创建一个node用户来跑所有的node projects：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo adduser <span class="se">\\</span>
</span><span class='line'>    --system <span class="se">\\</span>
</span><span class='line'>    --shell /bin/bash <span class="se">\\</span>
</span><span class='line'>    --gecos <span class="s1">&#39;user for running node.js projects&#39;</span> <span class="se">\\</span>
</span><span class='line'>    --group <span class="se">\\</span>
</span><span class='line'>    --disabled-password <span class="se">\\</span>
</span><span class='line'>    --home /home/node <span class="se">\\</span>
</span><span class='line'>    node
</span></code></pre></td></tr></table></div></figure>


<p>接下来便是配置一段Upstart的脚本来启动我们的Node应用，Ubuntu下Upstart的脚本默认是放在/etc/init下的，你可以创建一个和自己项目有关的myapp.conf文件放在下面，里面的内容如下(请把对应的文件目录和js文件替换成适合你自己项目的值)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>description <span class="s2">&quot;XXX node server&quot;</span>
</span><span class='line'>author  <span class="s2">&quot;Sherlock Yao&quot;</span>
</span><span class='line'>
</span><span class='line'>start on <span class="o">(</span><span class="nb">local</span>-filesystems and net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0<span class="o">)</span>
</span><span class='line'>stop on shutdown
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'>        <span class="nb">cd</span> /var/local/sites/myapp
</span><span class='line'>        <span class="nb">exec </span>sudo -u node <span class="nv">NODE_ENV</span><span class="o">=</span>production /usr/local/bin/node /var/local/sites/myapp/express.js &gt;&gt; /var/log/myapp.log 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>


<p>然后便是把你要部署的代码放到服务器上，我们是用Git管理的，所以直接clone下来，这里要注意的就是一定要把文件的权限附给node用户，包括日志文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /var/local/sites/myapp
</span><span class='line'>sudo chown node /var/local/sites/myapp
</span><span class='line'><span class="nb">cd</span> /var/local/sites/myapp
</span><span class='line'>sudo -u node git clone /path/to/myapp.git
</span><span class='line'>
</span><span class='line'>sudo touch /var/log/myapp.log
</span><span class='line'>sudo chown node /var/log/myapp.log
</span></code></pre></td></tr></table></div></figure>


<p>最后添加Nginx的反向代理，配置文件(/etc/nginx/sites-available/myapp)内容如下，记得把myapp替换成适合你自己情况的名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#添加完成后用&quot;sudo service nginx restart&quot;来重启nginx</span>
</span><span class='line'>
</span><span class='line'>upstream myapp <span class="o">{</span>
</span><span class='line'>    server 127.0.0.1:3000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen 80<span class="p">;</span>
</span><span class='line'>    server_name myapp.com<span class="p">;</span> <span class="c">#这里写上你自己需要的域名或ip</span>
</span><span class='line'>    access_log /var/log/nginx/myapp.log<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># pass the request to the node.js server with the correct headers and much more can be added, see nginx config options</span>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>      proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>      proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>      proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>      proxy_set_header X-NginX-Proxy <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      proxy_pass http://myapp/<span class="p">;</span>
</span><span class='line'>      proxy_redirect off<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一切配置妥当后，就可以用下面的命令开启、查看、停止你的应用了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start myapp
</span><span class='line'>sudo status myapp
</span><span class='line'>sudo stop myapp
</span></code></pre></td></tr></table></div></figure>


<p>另外附上一篇我参考的<a href="http://caolanmcmahon.com/posts/deploying_node_js_with_upstart/">英文博文</a>，里面有更详尽的说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MagicalRecord时做Migration的注意事项]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/11/core-data-migration-with-magicalrecord/"/>
    <updated>2014-09-11T16:22:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/11/core-data-migration-with-magicalrecord</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>是一个非常好用的工具，让我们更方便地使用Core Data，同时代码上也能变得更简洁。但是简单易用的代价就是如果你不清楚它具体的实现机制时，当某些复杂情况出现后，产生一些“莫名其妙”的问题而导致手足无措。所以如果对Core Data本身不太了解的开发者，我建议还是不要用这个工具，等到对其机制有一定了解后再慢慢把它引入自己的代码。</p>

<p>今天要讲的是通过一个自己的实际经历来说明一些使用MagicalRecord(以下简称MR)的注意点。首先我遇到的我问题是在对已有数据结构做调整时，我需要使用Core Data支持的Light Migration功能，按照它的要求添加了新版本的model文件后，发现期待的数据顺利迁移没有出现，出错了！</p>

<p>在这里插一句，如果你不关心用户以前存在数据库的数据是否丢失(就是这么拽)，只想确保任何时候都不会出错，那可以在配置MR前加上下面这句代码，它会确保在数据库文件和model文件不匹配的情况下直接删除数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setShouldDeleteStoreOnModelMismatch</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>本着用户至上的想法，我还是想找方法解决这个问题的，通过一番搜索后了解到在创建store的时候会用到一个option参数，MagicalRecord的代码是默认是如下的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">sqliteOptions</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">sqliteOptions</span> <span class="nl">setObject</span><span class="p">:</span><span class="s">@&quot;WAL&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;journal_mode&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的journal_mode似乎指的是数据库记录下了操作日志文件，而这个文件在迁移的时候也会被同时迁移，但是这种模式下会报错(笔者没有深入看这部分的资料，所以阐述有可能有问题，请仅做参考)，总之一些帖子里面的意见就是改成DELETE值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">sqliteOptions</span> <span class="nl">setObject</span><span class="p">:</span><span class="s">@&quot;DELETE&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;journal_mode&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>我试过之后没起作用，说明问题不在这里(笔者下文说明了当时这个出错场景的原因，但是并没有回头去验证journal mode这个参数是否会造成migration失败，所以希望有兴趣的读者自己去深入研究)，那问题在哪里呢？在仔细读了MR的源代码后发现了一些端倪，我们一般使用MR时初始化只会写类似以下的这样一句代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setupCoreDataStackWithAutoMigratingSqliteStoreNamed</span><span class="p">:</span><span class="s">@&quot;XXX.sqlite&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>它帮我们封装了所以初始化Core Data的方法，所以很多地方它使用了一些默认值，我们来看其中一个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span> <span class="nf">MR_mergedObjectModelFromMainBundle</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">mergedModelFromBundles</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在没有OjbectModel的时候，MR会默认调用这个方法来创建，问题就出在这里啦，原来我的项目当中有用到XMPP的一个库，它本身自己就带了好几个data model的定义文件，而MR在创建时使用的merge的方法把所有model都合并到了一起，这就造成以前的数据库文件里的model hash code永远都无法和新的匹配，就算我提供了所有的model版本文件。那如何解决呢？好在MR设计地很灵活，我们可以通过一下方法来配置它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setShouldAutoCreateManagedObjectModel</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSURL</span> <span class="o">*</span><span class="n">modelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource</span><span class="p">:</span><span class="s">@&quot;XXX&quot;</span> <span class="nl">withExtension</span><span class="p">:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="n">objectModel</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL</span><span class="p">:</span><span class="n">modelURL</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="bp">NSManagedObjectModel</span> <span class="nl">MR_setDefaultManagedObjectModel</span><span class="p">:</span><span class="n">objectModel</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是就算这样我还是无法解决问题，因为用户手机里的老数据用的还是merge了的model hash值，所以就算我这样做老数据还是无法迁移了，只能保证这个版本以后新版本就可以支持迁移了。这是一次惨痛的教训啊！所以强烈建议所有使用MR的工程师们，在正式的产品级项目里，初始化MR的时候就用以上这段繁琐的代码吧，不要用一句初始化的方法了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIPER实践（下）]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/10/viper-practise-2/"/>
    <updated>2014-09-10T16:01:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/10/viper-practise-2</id>
    <content type="html"><![CDATA[<p>上一篇文章我们设计好了View和Interactor，现在我们来做Presenter。</p>

<p>Presenter在这个用例里面的主要作用就是接受View提交过来的“提问”请求，然后向Interactor获取“答案”，最后把结果更新到View上，以下是实现部分的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="k">@interface</span> <span class="nc">HumanComputerCommunicatePresenter</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="n">AIRobotInteractorDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">ProgressViewInterface</span><span class="o">&gt;</span> <span class="n">progressView</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">MessageBoardViewInterface</span><span class="o">&gt;</span> <span class="n">messageBoard</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">AIRobotInteractor</span> <span class="o">*</span><span class="n">aiRobotInteractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">wantSendMessage</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">@implementation</span> <span class="nc">HumanComputerCommunicatePresenter</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">wantSendMessage</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="n">beginProgress</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">aiRobotInteractor</span> <span class="nl">askQuestion</span><span class="p">:</span><span class="n">message</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">aiRobotInteractor</span><span class="p">:(</span><span class="n">AIRobotInteractor</span> <span class="o">*</span><span class="p">)</span><span class="n">aiRobotInteractor</span> <span class="nl">didResponseToQuestion</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">question</span> <span class="nl">response</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="n">endProgress</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">messageBoard</span> <span class="nl">showMessage</span><span class="p">:</span><span class="n">response</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，Presenter就是承担了一个中间者的角色，它才是传统意义上MVC机构中的C(Controller)。其中有一点要注意的是，对应ViewInterface的reference，我们采用了weak的定义来防止Strong reference cycle ，在我自己的设计当中，我偏向于如下的reference关系：</p>

<ul>
<li>View &ndash;strong-> Presenter</li>
<li>Presenter &ndash;strong-> Interactor</li>
<li>Presenter &ndash;weak-> View</li>
</ul>


<p>最后我们来看一下Routing，objc.io那片文章中的Routing做的很散，通过多个wireframe来实现，我个人的设计中偏向用一个大的wireframe结合Assembling Factory来实现Routing，废话不多说看代码比较直观，以下只是我个人目前的一种实现方案，仅供参考：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">AssemblingFactory</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">assembleChatroomView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ChatroomViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIStoryboard</span> <span class="n">genericStoryboard</span><span class="p">]</span> <span class="nl">instantiateViewControllerWithIdentifier</span><span class="p">:</span><span class="n">ChatroomViewIdentifier</span><span class="p">];</span>
</span><span class='line'>  <span class="n">HumanComputerCommunicatePresenter</span> <span class="o">*</span><span class="n">presenter</span> <span class="o">=</span> <span class="p">[</span><span class="n">HumanComputerCommunicatePresenter</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AIRobotInteractor</span> <span class="o">*</span><span class="n">interactor</span> <span class="o">=</span> <span class="p">[</span><span class="n">AIRobotInteractor</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">viewController</span><span class="p">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span><span class="p">;</span>
</span><span class='line'>  <span class="n">presenter</span><span class="p">.</span><span class="n">progressView</span> <span class="o">=</span> <span class="n">viewController</span><span class="p">;</span>
</span><span class='line'>  <span class="n">presneter</span><span class="p">.</span><span class="n">messageBoard</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>  <span class="n">presenter</span><span class="p">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">interactor</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">presenter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">viewController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Wireframe</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">moveToNextPageOfViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">messenger:</span><span class="p">(</span><span class="n">PageMessenger</span> <span class="o">*</span><span class="p">)</span><span class="nv">messenger</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">selectorOfClass</span><span class="p">:[</span><span class="n">viewController</span> <span class="k">class</span><span class="p">]</span> <span class="nl">messengerName</span><span class="p">:[</span><span class="n">messenger</span> <span class="n">name</span><span class="p">]];</span>
</span><span class='line'>  <span class="kt">IMP</span> <span class="n">imp</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="nl">methodForSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="bp">UIViewController</span><span class="o">*</span><span class="p">,</span> <span class="bp">NSDictionary</span><span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">imp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">func</span><span class="p">([</span><span class="nb">self</span> <span class="k">class</span><span class="p">],</span> <span class="n">selector</span><span class="p">,</span> <span class="n">viewController</span><span class="p">,</span> <span class="p">[</span><span class="n">messenger</span> <span class="n">params</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nf">selectorOfClass:</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nv">class</span> <span class="nf">messengerName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">messengerName</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">selectorMap</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">selectorMap</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">selectorMap</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>                    <span class="s">@&quot;SplashViewControllerDefault&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithPointer</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">moveToChatroomViewController</span><span class="p">:</span><span class="nl">params</span><span class="p">:)]</span>
</span><span class='line'>                    <span class="c1">// add more nav configuration here...</span>
</span><span class='line'>                    <span class="l">}</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="bp">NSValue</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">selectorMap</span> <span class="nl">valueForKey</span><span class="p">:[[</span><span class="k">class</span> <span class="n">description</span><span class="p">]</span> <span class="nl">conj</span><span class="p">:</span><span class="n">messengerName</span><span class="p">]];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span> <span class="o">?</span> <span class="p">[</span><span class="n">value</span> <span class="n">pointerValue</span><span class="p">]</span> <span class="o">:</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">emptyMove</span><span class="p">:</span><span class="nl">params</span><span class="p">:);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">moveToChatroomViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">params:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">params</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">UIViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">AssemblingFactory</span> <span class="n">assembleChatroomView</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[(</span><span class="n">BaseViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span> <span class="nl">setParams</span><span class="p">:</span><span class="n">params</span><span class="p">];</span> <span class="c1">// I defined a base view controller to allow pass params</span>
</span><span class='line'>  <span class="p">[</span><span class="n">viewController</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上大致就是我个人目前实践VIPER的一些心得，肯定非常不成熟，有很多地方可以改进，只想抛砖引玉让大家广思集益共同改进我们代码的架构方案，从而最终帮助提高开发效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIPER实践（上）]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/09/viper-practise-1/"/>
    <updated>2014-09-09T14:35:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/09/viper-practise-1</id>
    <content type="html"><![CDATA[<p>好的代码质量对于开发效率的提升可谓是指数级别的，好的代码架构则像是地基一样，是一切的前提。在iOS代码架构中讨论最多的对象就是ViewController了，传统的开发很容易产生其臃肿冗长的结果，我们很多人都为如何给它减肥伤透脑筋，无数前辈们探索出了各种不同的方案都值得我们学习参考。今天要说的VIPER架构就是较新的一次尝试，我是通过objc.io的文章第一次知道到它，具体链接<a href="http://www.objc.io/issue-13/viper.html">这里</a>，虽然文章没有非常深入这个主题，给出的示例代码个人认为还存在些缺陷，但它整个理念正好吻合我之前一直在构思的方案，而且给了我一个非常系统的思路，于是我直接把它应用到了一个新的项目中去，在实践中去深入体会其优缺点，同时不断根据自己的理解改进，下面就通过一个假想的App作为示例来说明一下我自己的理解。</p>

<p>这个假想的App功能非常简单，类似一个简化版的Siri，用户在界面上输入一些文本后提交，应用就会返回一些回复的信息给你。首先在开始前我想说明一点，VIPER架构的核心思想就是把传统庞大的应用结构解构成View, interactor, Presenter, Entity, Routing五个部分，既然是做了解耦合，那各个部分直接应该做到相应的灵活和可重用，这点非常重要，我们在设计View，Presenter和Interactor时要时刻记住这一点。在objc.io原文章的示例代码中，这点做的就不够好，而在个人的实践中就更容易陷在这里，你会发现你给一个特定的View写了一个Presenter然后这个Presenter用到了一个特定的Interactor，这三个文件所做的就是应用中的一个特定的业务逻辑，所以也没办法被其他地方重用，其结果就是你只是简单的把原来属于一个ViewController的代码分散放到三个类中了，本质上却没有解耦合。请大家在看下面内容的时候时刻牢记这一点。同时示例我只提供了设计思路，并不提供实现的代码，因为示例的目的就是为了帮助理解VIPER的设计思路。</p>

<p>首先我们从View入手，界面上其实很简单：用户输入文本 -> 提交 -> 显示回应文本。我们想要的presenter对view的操作会有 1)显示/隐藏等待框 2)显示回应的文本两个主要的部分，接下来我们就要解耦合了。等待框和文本显示其实是不相关的两部分逻辑，所以我们的View Interface也应该要分开来，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 用于显示和隐藏等待框</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">ProgressViewInterface</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">beginProgress</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">endProgress</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 用于显示回应文本</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">MessageBoardViewInterface</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">showMessage</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prsenter是“VIP”结构中的中间件，起着承上启下的作用，所以我们放到下一篇文章里写，接下来我们来设计Interactor。Interactor在这里就只有一个功能，就是一个智能AI的角色。一般来说，interactor是一部分具体业务逻辑的实现者，虽然我们提倡对接口编程，但是这些实现一般一个应用就只会有一份，同时像Kiwi这种测试框架已经提供了良好的mock和stub支持，所以我们就不再对interactor设计接口，而是直接实现，其.h文件大致如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">AIRobotInteractor</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">CAIRobotInteractorDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">askQuestion:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">question</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">AIRobotInteractorDelegate</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">aiRobotInteractor</span><span class="p">:(</span><span class="n">AIRobotInteractor</span> <span class="o">*</span><span class="p">)</span><span class="n">aiRobotInteractor</span> <span class="nl">didResponseToQuestion</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">question</span> <span class="nl">response</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，这里我们使用了Delegate作为和presenter的交互方式，但不是一定要用，具体可以通过实际需求来设计交互形式。同时在类的命名上我故意使用了一些广泛的名字，目的就是为了突出解耦这个概念，要知道这些view interface和interactor可以在任何需要的地方使用而不是只局限在当前这个view controller。</p>

<p>好了，下一篇我将具体说Presenter和Routing。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何更新Storyboard的多国语言strings文件]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/08/localize-storyboard/"/>
    <updated>2014-09-08T18:47:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/08/localize-storyboard</id>
    <content type="html"><![CDATA[<p>目前XCode已经提供了很好的国际化集成，使你很容易就可以让应用支持国际化，就连Storyboard里面的文字也可以自动提取出来让工程师配置对应的多国文字。今天要讲的是当一个Storyboard文件已经本地化了以后，又有了新的需求而进行了改动，这时该如何去更新多国语言文件。</p>

<p>首先，如果你还不清楚如何国际化storyboard文件，那请点击<a href="http://www.raywenderlich.com/64401/internationalization-tutorial-for-ios-2014">这里</a>。</p>

<p>当一个storyboard文件被localize了以后，在XCode右边的文件查看窗口就可以看到对应的语言列表，它们前面有一个checkbox，如果勾选的话就表示那种语言有对应的strings文件。因为XCode只支持一次性生成所有的storyboard的localize文件，所以当每次更新storyboard后想更新语言文件就变得非常麻烦。</p>

<p><img src="http://sherlockyao.com/images/20140908/storyboard.png" title="" alt="File Inspector" /></p>

<p>我这里提供一个实践中学到的比较好的办法，就是首先你先备份一份你想要更新的语言文件，然后在右边的文件窗口把对应的那个勾选项取消掉，接着再选上，这个时候XCode就会重新生成一份新的文件。我们要做的就是把老文件里已经写好的对应关系复制到新文件上，再把新的元素的文字补上就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIScrollView在Autolayout下的实践经验]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/01/uiscrollview-with-autolayout/"/>
    <updated>2014-09-01T13:14:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/01/uiscrollview-with-autolayout</id>
    <content type="html"><![CDATA[<p>平常在我们使用UIScrollView的场景中，经常会有需求给它增加多个子元素，同时又需要有对应的布局。Autolayout对布局灵活性支持的提升是显而易见的，所以我们当然希望在Scroll View里也能使用约束(Constraint)来进行布局，不过在实践中Autolayout的引入往往会带来一些意外的问题，今天我就介绍一种比较好的实现方法来规避一些不必要的麻烦。</p>

<p>首先我们在Scroll View下面加一层额外的UIView(以下称为View A)，同时确保这个UIView是ScrollView的唯一子View，所以我们需要的其他页面元素都应该放在A下面，这个A的作用就是更方便我们来控制ScrollView的内容长度。</p>

<p>接下来我们就要添加A和ScrollView之间的约束了:</p>

<ul>
<li><p>我们需要给A添加Width和Height的约束，用一个写死的值(或者用placeholder约束，然后在代码里动态添加约束，这样可以做到动态控制内容的大小)，这样做的目的就是确定A的内容大小。</p></li>
<li><p>同时我们也需要添加A到Scroll View的top,right,bottom和left的约束，这些约束的目的是为了能让Scroll View计算出它的content size，这些约束不会改变A的大小，其实Scroll View就是通过A的大小和这些周边的距离值来确定其内容大小的。</p></li>
</ul>


<p>做完上面两步后，我们就可以像平常一样设计我们的布局，添加逻辑代码了。当然这不能规避所有问题，但是通过这个方案可以从概念上分离内容大小和显示区域大小，从而简化我们的工作。</p>

<p>想深入了解的话可以点这里<a href="http://spin.atomicobject.com/2014/03/05/uiscrollview-autolayout-ios/">参考文章</a></p>
]]></content>
  </entry>
  
</feed>
