<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | 姚翔的部落格]]></title>
  <link href="http://sherlockyao.com/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://sherlockyao.com/"/>
  <updated>2016-11-03T17:18:27+08:00</updated>
  <id>http://sherlockyao.com/</id>
  <author>
    <name><![CDATA[Sherlock Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Block时何时需要WeakSelf和StrongSelf?]]></title>
    <link href="http://sherlockyao.com/blog/2015/08/08/weakself-and-strongself-in-blocks/"/>
    <updated>2015-08-08T15:36:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2015/08/08/weakself-and-strongself-in-blocks</id>
    <content type="html"><![CDATA[<p>现在我们用 Objective-C 写代码时已经越来越多地用到了block，相比delegate的回调方式，block更直观易用。相信每个使用过block的人都遇到过block中使用self时需要weakself的情况，以下就是非常典型的一段代码：</p>

<pre><code class="objc">
__weak __typeof(self)weakSelf = self;
[self.context performBlock:^{
    __strong __typeof(weakSelf)strongSelf = weakSelf;
    [strongSelf doSomething];
}];
</code></pre>

<p>对于小白的我一般越到这种情况就是直接拷贝上面这个模板到需要的代码中去，而不知个中原委。但作为一个合格的程序员，是需要完完全全明白自己写的每一行代码是在做什么的，所以现在就简单说明一下这个 WeakSelf 和 StrongSelf 到底是什么。首先看下面这段代码：</p>

<pre><code class="objc">
[UIView animateWithDuration:0.2 animations:^{
    self.myView.alpha = 1.0; 
}];
</code></pre>

<p>在ARC环境下的，每个block在创建时，编译器会对里面用到的所有对象自动增加一个reference count，然后当block执行完毕时，再释放这些reference。针对上面的代码，在animations block执行期间，self（假设这里的self是个view controller）的引用数会被加1，执行完后再次减1。但这种情况下为什么我们一般不会去weakify self呢？因为这个block的生命周期是明确可知的，在这个block执行期间当前的view controller一般是不会被销毁的，所以不存在什么风险。现在我们看下面这个例子：</p>

<pre><code class="objc">
NSBlockOperation *op = [[[NSBlockOperation alloc] init] autorelease];
[op addExecutionBlock:^ {
    [self doSomething];
    [self doMoreThing];
}];
</code></pre>

<p>在这种情况下，我们并不知道这个execution block什么时候会执行完毕，所以很有可能发生的情况是，我在block还没执行完毕时就想销毁当前对象（比方说用户关闭了当前页面），这时就会因为block还对self有一个reference而没有立即销毁，这会引起很多问题，比方说你写在<code>- (void)dealloc {}</code>中的代码并不能马上得到执行。所以为了避免这种情况，我们会在block前加上<code>__weak __typeof(self)weakSelf = self;</code>的定义来使block对self获取一个弱引用（也就是refrence count不会加1）。</p>

<p>那block中的StrongSelf又是做什么的呢？还是上面的例子，当你加了WeakSelf后，block中的self随时都会有被释放的可能，所以会出现一种情况，在调用doSomething的时候self还存在，在doMoreThing的时候self就变成nil了，所以为了避免这种情况发生，我们会重新strongify self。一般情况下，我们都建议这么做，这没什么风险，除非你不关心self在执行过程中变成nil，或者你确定它不会变成nil（比方说所以block都在main thread执行）。</p>

<p>好了，简要的说明到此结束，想要详细了解的可以自行google，这类文章很多。前面代码中的WeakSelf、StrongSelf转换看起来很冗长，不利于阅读代码，下面介绍一个超好用的宏定义代码，它是这个开源库的一部分：<a href="https://github.com/jspahrsummers/libextobjc">libextobjc</a>。把它加入到项目中后，就可以用以下如此简洁的格式来完成转换啦：</p>

<pre><code class="objc">
#import "EXTScope.h"

@weakify(self)
[self.context performBlock:^{
    @strongify(self)
    [self doSomething];
}];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用MagicalRecord时做Migration的注意事项]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/11/core-data-migration-with-magicalrecord/"/>
    <updated>2014-09-11T16:22:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/11/core-data-migration-with-magicalrecord</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>是一个非常好用的工具，让我们更方便地使用Core Data，同时代码上也能变得更简洁。但是简单易用的代价就是如果你不清楚它具体的实现机制时，当某些复杂情况出现后，产生一些“莫名其妙”的问题而导致手足无措。所以如果对Core Data本身不太了解的开发者，我建议还是不要用这个工具，等到对其机制有一定了解后再慢慢把它引入自己的代码。</p>

<p>今天要讲的是通过一个自己的实际经历来说明一些使用MagicalRecord(以下简称MR)的注意点。首先我遇到的我问题是在对已有数据结构做调整时，我需要使用Core Data支持的Light Migration功能，按照它的要求添加了新版本的model文件后，发现期待的数据顺利迁移没有出现，出错了！</p>

<p>在这里插一句，如果你不关心用户以前存在数据库的数据是否丢失(就是这么拽)，只想确保任何时候都不会出错，那可以在配置MR前加上下面这句代码，它会确保在数据库文件和model文件不匹配的情况下直接删除数据：</p>

<pre><code class="objc">[MagicalRecord setShouldDeleteStoreOnModelMismatch:YES];
</code></pre>

<p>本着用户至上的想法，我还是想找方法解决这个问题的，通过一番搜索后了解到在创建store的时候会用到一个option参数，MagicalRecord的代码是默认是如下的：</p>

<pre><code class="objc">NSMutableDictionary *sqliteOptions = [NSMutableDictionary dictionary];
[sqliteOptions setObject:@"WAL" forKey:@"journal_mode"];
</code></pre>

<p>这里的journal_mode似乎指的是数据库记录下了操作日志文件，而这个文件在迁移的时候也会被同时迁移，但是这种模式下会报错(笔者没有深入看这部分的资料，所以阐述有可能有问题，请仅做参考)，总之一些帖子里面的意见就是改成DELETE值：</p>

<pre><code class="objc">[sqliteOptions setObject:@"DELETE" forKey:@"journal_mode"];
</code></pre>

<p>我试过之后没起作用，说明问题不在这里(笔者下文说明了当时这个出错场景的原因，但是并没有回头去验证journal mode这个参数是否会造成migration失败，所以希望有兴趣的读者自己去深入研究)，那问题在哪里呢？在仔细读了MR的源代码后发现了一些端倪，我们一般使用MR时初始化只会写类似以下的这样一句代码：</p>

<pre><code class="objc">[MagicalRecord setupCoreDataStackWithAutoMigratingSqliteStoreNamed:@"XXX.sqlite"];
</code></pre>

<p>它帮我们封装了所以初始化Core Data的方法，所以很多地方它使用了一些默认值，我们来看其中一个方法：</p>

<pre><code class="objc">+ (NSManagedObjectModel *) MR_mergedObjectModelFromMainBundle;
{
    return [self mergedModelFromBundles:nil];
}
</code></pre>

<p>在没有OjbectModel的时候，MR会默认调用这个方法来创建，问题就出在这里啦，原来我的项目当中有用到XMPP的一个库，它本身自己就带了好几个data model的定义文件，而MR在创建时使用的merge的方法把所有model都合并到了一起，这就造成以前的数据库文件里的model hash code永远都无法和新的匹配，就算我提供了所有的model版本文件。那如何解决呢？好在MR设计地很灵活，我们可以通过一下方法来配置它：</p>

<pre><code class="objc">[MagicalRecord setShouldAutoCreateManagedObjectModel:NO];
NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"XXX" withExtension:@"momd"];
NSManagedObjectModel *objectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
[NSManagedObjectModel MR_setDefaultManagedObjectModel:objectModel];
</code></pre>

<p>可是就算这样我还是无法解决问题，因为用户手机里的老数据用的还是merge了的model hash值，所以就算我这样做老数据还是无法迁移了，只能保证这个版本以后新版本就可以支持迁移了。这是一次惨痛的教训啊！所以强烈建议所有使用MR的工程师们，在正式的产品级项目里，初始化MR的时候就用以上这段繁琐的代码吧，不要用一句初始化的方法了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIPER实践（下）]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/10/viper-practise-2/"/>
    <updated>2014-09-10T16:01:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/10/viper-practise-2</id>
    <content type="html"><![CDATA[<p>上一篇文章我们设计好了View和Interactor，现在我们来做Presenter。</p>

<p>Presenter在这个用例里面的主要作用就是接受View提交过来的“提问”请求，然后向Interactor获取“答案”，最后把结果更新到View上，以下是实现部分的代码片段：</p>

<pre><code class="objc">
    @interface HumanComputerCommunicatePresenter : NSObject &lt;AIRobotInteractorDelegate&gt;

    @property (nonatomic, weak) id&lt;ProgressViewInterface&gt; progressView;
    @property (nonatomic, weak) id&lt;MessageBoardViewInterface&gt; messageBoard;
    @property (nonatomic, strong) AIRobotInteractor *aiRobotInteractor;

    - (void)wantSendMessage:(NSString *)message;

    @end


    @implementation HumanComputerCommunicatePresenter

    - (void)wantSendMessage:(NSString *)message {
      [self.progressView beginProgress];
      [self.aiRobotInteractor askQuestion:message]
    }

    - (void)aiRobotInteractor:(AIRobotInteractor *)aiRobotInteractor didResponseToQuestion:(NSString *)question response:(NSString *)response {
      [self.progressView endProgress];
      [self.messageBoard showMessage:response];
    }

    @end
</code></pre>

<p>可以发现，Presenter就是承担了一个中间者的角色，它才是传统意义上MVC机构中的C(Controller)。其中有一点要注意的是，对应ViewInterface的reference，我们采用了weak的定义来防止Strong reference cycle ，在我自己的设计当中，我偏向于如下的reference关系：</p>

<ul>
<li>View &ndash;strong-> Presenter</li>
<li>Presenter &ndash;strong-> Interactor</li>
<li>Presenter &ndash;weak-> View</li>
</ul>


<p>最后我们来看一下Routing，objc.io那片文章中的Routing做的很散，通过多个wireframe来实现，我个人的设计中偏向用一个大的wireframe结合Assembling Factory来实现Routing，废话不多说看代码比较直观，以下只是我个人目前的一种实现方案，仅供参考：</p>

<pre><code class="objc">    @implementation AssemblingFactory

    + (UIViewController *)assembleChatroomView {
      ChatroomViewController *viewController = [[UIStoryboard genericStoryboard] instantiateViewControllerWithIdentifier:ChatroomViewIdentifier];
      HumanComputerCommunicatePresenter *presenter = [HumanComputerCommunicatePresenter new];
      AIRobotInteractor *interactor = [AIRobotInteractor new];

      viewController.presenter = presenter;
      presenter.progressView = viewController;
      presneter.messageBoard = viewController
      presenter.interactor = interactor;
      interactor.delegate = presenter;

      return viewController;
    }

    @end


    @implementation Wireframe

    + (void)moveToNextPageOfViewController:(UIViewController *)viewController messenger:(PageMessenger *)messenger {
      SEL selector = [self selectorOfClass:[viewController class] messengerName:[messenger name]];
      IMP imp = [[self class] methodForSelector:selector];
      void (*func)(id, SEL, UIViewController*, NSDictionary*) = (void *)imp;
      func([self class], selector, viewController, [messenger params]);
    }

    + (SEL)selectorOfClass:(Class)class messengerName:(NSString *)messengerName {
      static NSDictionary *selectorMap = nil;
      if (!selectorMap) {

        selectorMap = @{
                        @"SplashViewControllerDefault" : [NSValue valueWithPointer:@selector(moveToChatroomViewController:params:)]
                        // add more nav configuration here...
                        };
      }
      NSValue *value = [selectorMap valueForKey:[[class description] conj:messengerName]];
      return value ? [value pointerValue] : @selector(emptyMove:params:);
    }

    + (void)moveToChatroomViewController:(UIViewController *)viewController params:(NSDictionary *)params {
      UIViewController *viewController = [AssemblingFactory assembleChatroomView];
      [(BaseViewController *)viewController setParams:params]; // I defined a base view controller to allow pass params
      [viewController.navigationController pushViewController:viewController animated:YES];
    }

    @end
</code></pre>

<p>以上大致就是我个人目前实践VIPER的一些心得，肯定非常不成熟，有很多地方可以改进，只想抛砖引玉让大家广思集益共同改进我们代码的架构方案，从而最终帮助提高开发效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIPER实践（上）]]></title>
    <link href="http://sherlockyao.com/blog/2014/09/09/viper-practise-1/"/>
    <updated>2014-09-09T14:35:00+08:00</updated>
    <id>http://sherlockyao.com/blog/2014/09/09/viper-practise-1</id>
    <content type="html"><![CDATA[<p>好的代码质量对于开发效率的提升可谓是指数级别的，好的代码架构则像是地基一样，是一切的前提。在iOS代码架构中讨论最多的对象就是ViewController了，传统的开发很容易产生其臃肿冗长的结果，我们很多人都为如何给它减肥伤透脑筋，无数前辈们探索出了各种不同的方案都值得我们学习参考。今天要说的VIPER架构就是较新的一次尝试，我是通过objc.io的文章第一次知道到它，具体链接<a href="http://www.objc.io/issue-13/viper.html">这里</a>，虽然文章没有非常深入这个主题，给出的示例代码个人认为还存在些缺陷，但它整个理念正好吻合我之前一直在构思的方案，而且给了我一个非常系统的思路，于是我直接把它应用到了一个新的项目中去，在实践中去深入体会其优缺点，同时不断根据自己的理解改进，下面就通过一个假想的App作为示例来说明一下我自己的理解。</p>

<p>这个假想的App功能非常简单，类似一个简化版的Siri，用户在界面上输入一些文本后提交，应用就会返回一些回复的信息给你。首先在开始前我想说明一点，VIPER架构的核心思想就是把传统庞大的应用结构解构成View, interactor, Presenter, Entity, Routing五个部分，既然是做了解耦合，那各个部分直接应该做到相应的灵活和可重用，这点非常重要，我们在设计View，Presenter和Interactor时要时刻记住这一点。在objc.io原文章的示例代码中，这点做的就不够好，而在个人的实践中就更容易陷在这里，你会发现你给一个特定的View写了一个Presenter然后这个Presenter用到了一个特定的Interactor，这三个文件所做的就是应用中的一个特定的业务逻辑，所以也没办法被其他地方重用，其结果就是你只是简单的把原来属于一个ViewController的代码分散放到三个类中了，本质上却没有解耦合。请大家在看下面内容的时候时刻牢记这一点。同时示例我只提供了设计思路，并不提供实现的代码，因为示例的目的就是为了帮助理解VIPER的设计思路。</p>

<p>首先我们从View入手，界面上其实很简单：用户输入文本 -> 提交 -> 显示回应文本。我们想要的presenter对view的操作会有 1)显示/隐藏等待框 2)显示回应的文本两个主要的部分，接下来我们就要解耦合了。等待框和文本显示其实是不相关的两部分逻辑，所以我们的View Interface也应该要分开来，如下所示：</p>

<pre><code class="objc">    // 用于显示和隐藏等待框
    @protocol ProgressViewInterface &lt;NSObject&gt;

    - (void)beginProgress;
    - (void)endProgress;

    @end

    // 用于显示回应文本
    @protocol MessageBoardViewInterface &lt;NSObject&gt;

    - (void)showMessage:(NSString *)message;

    @end
</code></pre>

<p>Prsenter是“VIP”结构中的中间件，起着承上启下的作用，所以我们放到下一篇文章里写，接下来我们来设计Interactor。Interactor在这里就只有一个功能，就是一个智能AI的角色。一般来说，interactor是一部分具体业务逻辑的实现者，虽然我们提倡对接口编程，但是这些实现一般一个应用就只会有一份，同时像Kiwi这种测试框架已经提供了良好的mock和stub支持，所以我们就不再对interactor设计接口，而是直接实现，其.h文件大致如下：</p>

<pre><code class="objc">    @interface AIRobotInteractor : NSObject

    @property (nonatomic, weak) id&lt;CAIRobotInteractorDelegate&gt; delegate;

    - (void)askQuestion:(NSString *)question;

    @end


    @protocol AIRobotInteractorDelegate &lt;NSObject&gt;

    @optional
    - (void)aiRobotInteractor:(AIRobotInteractor *)aiRobotInteractor didResponseToQuestion:(NSString *)question response:(NSString *)response;

    @end
</code></pre>

<p>注意，这里我们使用了Delegate作为和presenter的交互方式，但不是一定要用，具体可以通过实际需求来设计交互形式。同时在类的命名上我故意使用了一些广泛的名字，目的就是为了突出解耦这个概念，要知道这些view interface和interactor可以在任何需要的地方使用而不是只局限在当前这个view controller。</p>

<p>好了，下一篇我将具体说Presenter和Routing。</p>
]]></content>
  </entry>
  
</feed>
